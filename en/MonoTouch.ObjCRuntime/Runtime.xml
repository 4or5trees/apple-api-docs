<Type Name="Runtime" FullName="MonoTouch.ObjCRuntime.Runtime">
  <TypeSignature Language="C#" Value="public static class Runtime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Runtime extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides information about the MonoTouch Runtime.</summary>
    <remarks />
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=133bdad4-776a-454d-a265-889d009d0335">SysSound</related>
  </Docs>
  <Members>
    <Member MemberName="Arch">
      <MemberSignature Language="C#" Value="public static MonoTouch.ObjCRuntime.Arch Arch;" />
      <MemberSignature Language="ILAsm" Value=".field public static valuetype MonoTouch.ObjCRuntime.Arch Arch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.Arch</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The architecture where the code is currently running.</summary>
        <remarks>Use this to determine the architecture on which the program is currently running (device or simulator).</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectMethod">
      <MemberSignature Language="C#" Value="public static void ConnectMethod (System.Reflection.MethodInfo method, MonoTouch.ObjCRuntime.Selector selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ConnectMethod(class System.Reflection.MethodInfo method, class MonoTouch.ObjCRuntime.Selector selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="method">Method to register with the runtime.</param>
        <param name="selector">Selector that will we want to connect to.</param>
        <summary>This call allows the specified method in this method to respond to message invocations on this selector.</summary>
        <remarks>
          <para>
	    The method must be declared on an NSObject-derived class.    
	  </para>
          <para>

	    You can use this method to dynamically reconfigure which
	    methods on a class should respond to which Objective-C
	    selectors.

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNSObject">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject GetNSObject (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject GetNSObject(native int ptr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">A pointer to an unmanaged NSObject or any class that derives from the Objective-C NSObject class.</param>
        <summary>Wraps an unmanaged IntPtr into a fully typed NSObject.</summary>
        <returns>An instance of a class that derives from MonoTouch.Foundation.NSObject.</returns>
        <remarks>The runtime create an instance of the most derived class.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSurfacedObjects">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;WeakReference&gt; GetSurfacedObjects ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;class System.WeakReference&gt; GetSurfacedObjects() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.WeakReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a list of all the Objective-C objects that have been surfaced to the managed world.</summary>
        <returns>
        </returns>
        <remarks>The list contains weak references, to allow GC to take place.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly a) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">The assembly to process.</param>
        <summary>Registers all of the classes in the specified assembly.</summary>
        <remarks>This iterates over all the types that derive from NSObject in the specified assembly and registers them with the runtime.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartWWAN">
      <MemberSignature Language="C#" Value="public static void StartWWAN (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartWWAN(class System.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">Uri to probe to start the WWAN connection.</param>
        <summary>This method forces the WAN network access to be woken up.</summary>
        <remarks>When the phone is not on WiFi, this will force the networking stack to start.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartWWAN">
      <MemberSignature Language="C#" Value="public static void StartWWAN (Uri uri, Action&lt;Exception&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StartWWAN(class System.Uri uri, class System.Action`1&lt;class System.Exception&gt; callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="callback" Type="System.Action&lt;System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="uri">Uri to probe to start the WWAN connection.</param>
        <param name="callback">Callback that will be called when the WWAN connection has been started up. This callback will be invoked on the main thread. If there was an exception while trying to start the WWAN, it will be passed to the callback, otherwise null is passed.</param>
        <summary>This method forces the WAN network access to be woken up asynchronously.</summary>
        <remarks>When the phone is not on WiFi, this will force the networking stack to start.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
