<Type Name="AudioSession" FullName="MonoTouch.AudioToolbox.AudioSession">
  <TypeSignature Language="C#" Value="public static class AudioSession" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AudioSession extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Interface to to control the audio context of your application</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=26d904c2-c44a-46f2-883a-a01bb5657309">StreamingAudio</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=133bdad4-776a-454d-a265-889d009d0335">SysSound</related>
  </Docs>
  <Members>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (MonoTouch.AudioToolbox.AudioSessionProperty property, MonoTouch.AudioToolbox.AudioSession.PropertyListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(valuetype MonoTouch.AudioToolbox.AudioSessionProperty property, class MonoTouch.AudioToolbox.AudioSession/PropertyListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="MonoTouch.AudioToolbox.AudioSessionProperty" />
        <Parameter Name="listener" Type="MonoTouch.AudioToolbox.AudioSession+PropertyListener" />
      </Parameters>
      <Docs>
        <param name="property">The property to monitor.</param>
        <param name="listener">Callback to invoke when the property changes.</param>
        <summary>Registers a method to be invoked when an audio session property changes.</summary>
        <remarks>Use the RemoveListener method to stop receiving property change notifications.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioInputAvailable">
      <MemberSignature Language="C#" Value="public static bool AudioInputAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AudioInputAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioRoute">
      <MemberSignature Language="C#" Value="public static string AudioRoute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string AudioRoute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioShouldDuck">
      <MemberSignature Language="C#" Value="public static bool AudioShouldDuck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AudioShouldDuck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public static MonoTouch.AudioToolbox.AudioSessionCategory Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype MonoTouch.AudioToolbox.AudioSessionCategory Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioSessionCategory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentHardwareInputLatency">
      <MemberSignature Language="C#" Value="public static float CurrentHardwareInputLatency { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 CurrentHardwareInputLatency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentHardwareInputNumberChannels">
      <MemberSignature Language="C#" Value="public static int CurrentHardwareInputNumberChannels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CurrentHardwareInputNumberChannels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentHardwareIOBufferDuration">
      <MemberSignature Language="C#" Value="public static float CurrentHardwareIOBufferDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 CurrentHardwareIOBufferDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentHardwareOutputLatency">
      <MemberSignature Language="C#" Value="public static float CurrentHardwareOutputLatency { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 CurrentHardwareOutputLatency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentHardwareOutputNumberChannels">
      <MemberSignature Language="C#" Value="public static int CurrentHardwareOutputNumberChannels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CurrentHardwareOutputNumberChannels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentHardwareOutputVolume">
      <MemberSignature Language="C#" Value="public static float CurrentHardwareOutputVolume { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 CurrentHardwareOutputVolume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentHardwareSampleRate">
      <MemberSignature Language="C#" Value="public static double CurrentHardwareSampleRate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 CurrentHardwareSampleRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes the Audio Session.</summary>
        <remarks>
          <para>

	    In addition to calling the Initialize method on
	    AudioSession, you will want to set the <see cref="P:MonoTouch.AudioToolbox.AudioSession.Category" />
	    and the <see cref="P:MonoTouch.AudioToolbox.AudioSession.Mode" />
	    properties to control the priority of your audio and the
	    rules for mixing your audio with other audio playing on
	    the device.

	  </para>
          <para>

	    When you call this variation of Initialize, both the <see cref="E:MonoTouch.AudioToolbox.AudioSession.Interrupted" />
	    and <see cref="E:MonoTouch.AudioToolbox.AudioSession.Resumed" />
	    events are raised on the main loop.  Use the <see cref="P:MonoTouch.AudioToolbox.AudioSession.Initialize(MonoTouch.CoreFoundation.CFRunLoop&#xA;	    runLoop, System.String runMode)" /> if you want to specify
	    a different runloop.

	  </para>
          <example>
            <code lang="c#">
//
// Initialize the audio session for audio playback
//
AudioSession.Initialize ();
AudioSession.Category = AudioSessionCategory.MediaPlayback;
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize (MonoTouch.CoreFoundation.CFRunLoop runLoop, string runMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize(class MonoTouch.CoreFoundation.CFRunLoop runLoop, string runMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runLoop" Type="MonoTouch.CoreFoundation.CFRunLoop" />
        <Parameter Name="runMode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="runLoop">The runloop to execute on.</param>
        <param name="runMode">Run loop mode (see NSRunLoop for the various modes).</param>
        <summary>Initializes the Audio Session.</summary>
        <remarks>
          <para>

	    In addition to calling the Initialize method on
	    AudioSession, you will want to set the <see cref="P:MonoTouch.AudioToolbox.AudioSession.Category" />
	    and the <see cref="P:MonoTouch.AudioToolbox.AudioSession.Mode" />
	    properties to control the priority of your audio and the
	    rules for mixing your audio with other audio playing on
	    the device.

	  </para>
          <para>

	    When you call this variation of Initialize, both the <see cref="E:MonoTouch.AudioToolbox.AudioSession.Interrupted" />
	    and <see cref="E:MonoTouch.AudioToolbox.AudioSession.Resumed" />
	    events are raised on the specified run loop with the
	    specified run loop mode.  Use the <see cref="P:MonoTouch.AudioToolbox.AudioSession.Initialize()" />
	    if you want those events to be raised on the main thread.

	  </para>
          <example>
            <code lang="c#">
//
// Initialize the audio session for audio playback
//
AudioSession.Initialize (myRunLoop, myRunMode);
AudioSession.Category = AudioSessionCategory.MediaPlayback;
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputRoute">
      <MemberSignature Language="C#" Value="public static MonoTouch.AudioToolbox.AudioSessionInputRouteKind InputRoute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype MonoTouch.AudioToolbox.AudioSessionInputRouteKind InputRoute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioSessionInputRouteKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Interrupted">
      <MemberSignature Language="C#" Value="public static event EventHandler Interrupted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Interrupted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when the audio session has been interrupted.</summary>
        <remarks>
          <para>

	    You can use the <see cref="P:MonoTouch.AudioToolbox.AudioSession.InterruptionType" /> property to determine the cause of the interruption.

	  </para>
          <para>
	    In addition, the Resumed event is raised when the audio session is resumed.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterruptionType">
      <MemberSignature Language="C#" Value="public static MonoTouch.AudioToolbox.AudioSessionInterruptionType InterruptionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype MonoTouch.AudioToolbox.AudioSessionInterruptionType InterruptionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioSessionInterruptionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of interruption, used to determine the appropriate course of action when the AudioSession is interrupted.</summary>
        <value>
        </value>
        <remarks>
	  The value of this property is only valid when called from the <see cref="E:MonoTouch.AudioToolbox.AudioSession.Interrupted" /> event handler.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public static MonoTouch.AudioToolbox.AudioSessionMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype MonoTouch.AudioToolbox.AudioSessionMode Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioSessionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Configuration modes for Audio, it provides finer control over the Category property.</summary>
        <value>
        </value>
        <remarks>
          <para>

	    This property is used to do the fine-level control over
	    the audio session.  The major component is determined by
	    the <see cref="P:MonoTouch.AudioToolbox.AudioSession.Category" />
	    property and this is used to tune whether the session
	    behaves in the default mode (what every app got in the pre
	    iOS 5.0 days), Voice Chat, Video Recording or is being
	    used in Measurement mode (where you get raw data, without
	    any gain changes for Audio).

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OtherAudioIsPlaying">
      <MemberSignature Language="C#" Value="public static bool OtherAudioIsPlaying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OtherAudioIsPlaying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputRoutes">
      <MemberSignature Language="C#" Value="public static MonoTouch.AudioToolbox.AudioSessionOutputRouteKind[] OutputRoutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype MonoTouch.AudioToolbox.AudioSessionOutputRouteKind[] OutputRoutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioSessionOutputRouteKind[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCategoryDefaultToSpeaker">
      <MemberSignature Language="C#" Value="public static bool OverrideCategoryDefaultToSpeaker { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OverrideCategoryDefaultToSpeaker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCategoryEnableBluetoothInput">
      <MemberSignature Language="C#" Value="public static bool OverrideCategoryEnableBluetoothInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OverrideCategoryEnableBluetoothInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If input is coming from a bluetooth headset, it routes the audio output to the headset.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCategoryMixWithOthers">
      <MemberSignature Language="C#" Value="public static bool OverrideCategoryMixWithOthers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OverrideCategoryMixWithOthers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHardwareIOBufferDuration">
      <MemberSignature Language="C#" Value="public static float PreferredHardwareIOBufferDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 PreferredHardwareIOBufferDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHardwareSampleRate">
      <MemberSignature Language="C#" Value="public static double PreferredHardwareSampleRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 PreferredHardwareSampleRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (MonoTouch.AudioToolbox.AudioSessionProperty property, MonoTouch.AudioToolbox.AudioSession.PropertyListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(valuetype MonoTouch.AudioToolbox.AudioSessionProperty property, class MonoTouch.AudioToolbox.AudioSession/PropertyListener listener) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="MonoTouch.AudioToolbox.AudioSessionProperty" />
        <Parameter Name="listener" Type="MonoTouch.AudioToolbox.AudioSession+PropertyListener" />
      </Parameters>
      <Docs>
        <param name="property">The monitored property.</param>
        <param name="listener">The Callback that was specified in the call to AddListener.</param>
        <summary>Removes the specified listener from the list of monitored audio session properties.</summary>
        <remarks>Properties to monitor are registered with the AddListener method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resumed">
      <MemberSignature Language="C#" Value="public static event EventHandler Resumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Resumed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when the audio session has resumed.</summary>
        <remarks>In addition, the Interrupted event is raised when the audio session is interrupted.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutingOverride">
      <MemberSignature Language="C#" Value="public static MonoTouch.AudioToolbox.AudioSessionRoutingOverride RoutingOverride { set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype MonoTouch.AudioToolbox.AudioSessionRoutingOverride RoutingOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioSessionRoutingOverride</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActive">
      <MemberSignature Language="C#" Value="public static void SetActive (bool active);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetActive(bool active) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="active" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="active">Whether to enable the audio session.</param>
        <summary>Enables or Disables the audio session.</summary>
        <remarks>
          <para>
	    This method is used to enable and disable the audio session.
	  </para>
          <para>
	    This method can throw an AudioSessionException if another
	    application is currently using the AudioSession in the
	    foreground and does not support audio mixing.
	  </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
