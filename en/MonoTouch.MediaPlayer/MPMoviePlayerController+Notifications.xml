<Type Name="MPMoviePlayerController+Notifications" FullName="MonoTouch.MediaPlayer.MPMoviePlayerController+Notifications">
  <TypeSignature Language="C#" Value="public static class MPMoviePlayerController.Notifications" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed beforefieldinit MPMoviePlayerController/Notifications extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Notification posted by the &lt;see cref ="T:MonoTouch.MediaPlayer.MPMoviePlayerController"/&gt; class.</summary>
    <remarks>
      <para>This is a static class which contains various helper methods that allow developers to observe events posted in the iOS notification hub (<see cref="T:MonoTouch.Foundation.NSNotificationCenter" />).</para>
      <para>The methods defined in this class post events invoke the provided method or lambda with a <see cref="T:MonoTouch.Foundation.NSNotificationEventArgs" /> parameter which contains strongly typed properties for the notification arguments.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ObserveDidEnterFullscreen">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveDidEnterFullscreen (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveDidEnterFullscreen(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerDidEnterFullscreenNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveDidEnterFullscreen ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveDidEnterFullscreen args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveDidEnterFullscreen (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDidExitFullscreen">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveDidExitFullscreen (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveDidExitFullscreen(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerDidExitFullscreenNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveDidExitFullscreen ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveDidExitFullscreen args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveDidExitFullscreen (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDurationAvailable">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveDurationAvailable (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveDurationAvailable(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMovieDurationAvailableNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveDurationAvailable ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveDurationAvailable args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveDurationAvailable (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveLoadStateDidChange">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveLoadStateDidChange (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveLoadStateDidChange(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerLoadStateDidChangeNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveLoadStateDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveLoadStateDidChange args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveLoadStateDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveMediaPlaybackIsPreparedToPlayDidChange">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveMediaPlaybackIsPreparedToPlayDidChange (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveMediaPlaybackIsPreparedToPlayDidChange(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMediaPlaybackIsPreparedToPlayDidChangeNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveMediaPlaybackIsPreparedToPlayDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveMediaPlaybackIsPreparedToPlayDidChange args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveMediaPlaybackIsPreparedToPlayDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveMoviePlayerReadyForDisplayDidChange">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveMoviePlayerReadyForDisplayDidChange (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveMoviePlayerReadyForDisplayDidChange(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerReadyForDisplayDidChangeNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveMoviePlayerReadyForDisplayDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveMoviePlayerReadyForDisplayDidChange args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveMoviePlayerReadyForDisplayDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveNaturalSizeAvailable">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveNaturalSizeAvailable (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveNaturalSizeAvailable(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMovieNaturalSizeAvailableNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveNaturalSizeAvailable ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveNaturalSizeAvailable args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveNaturalSizeAvailable (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveNowPlayingMovieDidChange">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveNowPlayingMovieDidChange (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveNowPlayingMovieDidChange(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerNowPlayingMovieDidChangeNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveNowPlayingMovieDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveNowPlayingMovieDidChange args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveNowPlayingMovieDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObservePlaybackDidFinish">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObservePlaybackDidFinish (EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerFinishedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObservePlaybackDidFinish(class System.EventHandler`1&lt;class MonoTouch.MediaPlayer.MPMoviePlayerFinishedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerFinishedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerPlaybackDidFinishNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObservePlaybackDidFinish ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("FinishReason", args.FinishReason);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObservePlaybackDidFinish args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("FinishReason", args.FinishReason);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObservePlaybackDidFinish (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObservePlaybackStateDidChange">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObservePlaybackStateDidChange (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObservePlaybackStateDidChange(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerPlaybackStateDidChangeNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObservePlaybackStateDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObservePlaybackStateDidChange args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObservePlaybackStateDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveScalingModeDidChange">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveScalingModeDidChange (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveScalingModeDidChange(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerScalingModeDidChangeNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveScalingModeDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveScalingModeDidChange args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveScalingModeDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveSourceTypeAvailable">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveSourceTypeAvailable (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveSourceTypeAvailable(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMovieSourceTypeAvailableNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveSourceTypeAvailable ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveSourceTypeAvailable args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveSourceTypeAvailable (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveThumbnailImageRequestDidFinish">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveThumbnailImageRequestDidFinish (EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerThumbnailEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveThumbnailImageRequestDidFinish(class System.EventHandler`1&lt;class MonoTouch.MediaPlayer.MPMoviePlayerThumbnailEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerThumbnailEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerThumbnailImageRequestDidFinishNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveThumbnailImageRequestDidFinish ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Image", args.Image);
    Console.WriteLine ("Time", args.Time);
    Console.WriteLine ("Error", args.Error);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveThumbnailImageRequestDidFinish args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Image", args.Image);
    Console.WriteLine ("Time", args.Time);
    Console.WriteLine ("Error", args.Error);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveThumbnailImageRequestDidFinish (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveTimedMetadataUpdated">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveTimedMetadataUpdated (EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerTimedMetadataEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveTimedMetadataUpdated(class System.EventHandler`1&lt;class MonoTouch.MediaPlayer.MPMoviePlayerTimedMetadataEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerTimedMetadataEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerTimedMetadataUpdatedNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveTimedMetadataUpdated ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TimedMetadata", args.TimedMetadata);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveTimedMetadataUpdated args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TimedMetadata", args.TimedMetadata);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveTimedMetadataUpdated (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveWillEnterFullscreen">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveWillEnterFullscreen (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveWillEnterFullscreen(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerWillEnterFullscreenNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveWillEnterFullscreen ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveWillEnterFullscreen args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveWillEnterFullscreen (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveWillExitFullscreen">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveWillExitFullscreen (EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerFullScreenEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveWillExitFullscreen(class System.EventHandler`1&lt;class MonoTouch.MediaPlayer.MPMoviePlayerFullScreenEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.MediaPlayer.MPMoviePlayerFullScreenEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the MPMoviePlayerWillExitFullscreenNotification notification is posted.</summary>
        <returns>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to &lt;see cref="M:MonoTouch.Foundation.NSNotification.RemoveObserver"/&gt;</returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = MPMoviePlayerController.Notifications.ObserveObserveWillExitFullscreen ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AnimationDuration", args.AnimationDuration);
    Console.WriteLine ("AnimationCurve", args.AnimationCurve);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, ObserveWillExitFullscreen args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AnimationDuration", args.AnimationDuration);
    Console.WriteLine ("AnimationCurve", args.AnimationCurve);
}

void Setup ()
{
    notification = MPMoviePlayerController.Notifications.ObserveObserveWillExitFullscreen (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
