<Type Name="CIFilter" FullName="MonoTouch.CoreImage.CIFilter">
  <TypeSignature Language="C#" Value="public class CIFilter : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIFilter extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CIFilter", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>CoreImage image filter.</summary>
    <remarks>
	<!-- TODO: Update to iOS 6 list -->
      <para>

	On iOS 5.0, the following are the built-in filters:

	<see cref="T:MonoTouch.CoreImage.CICategoryBlur" />, <see cref="T:MonoTouch.CoreImage.CICategoryColorEffect" />,
	<see cref="T:MonoTouch.CoreImage.CIAdditionCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CIAffineTransform" />,
	<see cref="T:MonoTouch.CoreImage.CICheckerboardGenerator" />,
	<see cref="T:MonoTouch.CoreImage.CIColorBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIColorBurnBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIColorControls" />,
	<see cref="T:MonoTouch.CoreImage.CIColorCube" />,
	<see cref="T:MonoTouch.CoreImage.CIColorDodgeBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIColorInvert" />,
	<see cref="T:MonoTouch.CoreImage.CIColorMatrix" />,
	<see cref="T:MonoTouch.CoreImage.CIColorMonochrome" />,
	<see cref="T:MonoTouch.CoreImage.CIConstantColorGenerator" />,
	<see cref="T:MonoTouch.CoreImage.CICrop" />,
	<see cref="T:MonoTouch.CoreImage.CIDarkenBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIDifferenceBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIExclusionBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIExposureAdjust" />,
	<see cref="T:MonoTouch.CoreImage.CIFalseColor" />,
	<see cref="T:MonoTouch.CoreImage.CIGammaAdjust" />,
	<see cref="T:MonoTouch.CoreImage.CIGaussianGradient" />,
	<see cref="T:MonoTouch.CoreImage.CIHardLightBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIHighlightShadowAdjust" />,
	<see cref="T:MonoTouch.CoreImage.CIHueAdjust" />,
	<see cref="T:MonoTouch.CoreImage.CIHueBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CILightenBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CILinearGradient" />,
	<see cref="T:MonoTouch.CoreImage.CILuminosityBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIMaximumCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CIMinimumCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CIMultiplyBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIMultiplyCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CIOverlayBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIRadialGradient" />,
	<see cref="T:MonoTouch.CoreImage.CISaturationBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CIScreenBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CISepiaTone" />,
	<see cref="T:MonoTouch.CoreImage.CISoftLightBlendMode" />,
	<see cref="T:MonoTouch.CoreImage.CISourceAtopCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CISourceInCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CISourceOutCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CISourceOverCompositing" />,
	<see cref="T:MonoTouch.CoreImage.CIStraightenFilter" />,
	<see cref="T:MonoTouch.CoreImage.CIStripesGenerator" />,
	<see cref="T:MonoTouch.CoreImage.CITemperatureAndTint" />,
	<see cref="T:MonoTouch.CoreImage.CIToneCurve" />,
	<see cref="T:MonoTouch.CoreImage.CIVibrance" />,
	<see cref="T:MonoTouch.CoreImage.CIVignette" /> and <see cref="T:MonoTouch.CoreImage.CIWhitePointAdjust" />.

      </para>
      <para>

	To create a filter of the specified type, instantiate an
	instance of one of the above types, assign values to their
	properties and extract the result by using the OutputImage
	property.

      </para>
      <example>
        <code lang="C#">
var sepiaFilter = new CISepiaTone () {
	Image = mySourceImage,
	Intensity = 0.8f
};
	</code>
      </example>
      <para>
	You can chain your filters as well:
      </para>
      <example>
        <code lang="C#">
var sepiaFilter = new CISepiaTone () {
	Image = mySourceImage,
	Intensity = .8f
};
var invert = new CIColorInvert () {
	Image = sepia.OutputImage
};
        </code>
      </example>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=e2a0ccca-ab10-4e41-9c09-11831a8c1380">coreimage</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIFilter (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIFilter (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIFilter (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("attributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Configurable attributes of the filter.</summary>
        <value>To be added.</value>
        <remarks>
          <para>

	    Each filter has a set of attributes that control it.  You can
	    get this list by requesting the Attributes dictionary from the
	    filter.  Each fitler, in addition to having a series of
	    configurable properties always includes its name
	    ("CIAttributeFilterName" key), a user friendly name
	    ("CIAttributeFilterDisplayName" key) and a list of categories
	    that this filter belongs to ("CIAttributeFilterCategories").   

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CIFilter object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CIFilter class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the CIFilter ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNamesInCategories">
      <MemberSignature Language="C#" Value="public static string[] FilterNamesInCategories (string[] categories);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FilterNamesInCategories(string[] categories) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categories" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="categories">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNamesInCategory">
      <MemberSignature Language="C#" Value="public static string[] FilterNamesInCategory (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FilterNamesInCategory(string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterNamesInCategory:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter FromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter FromName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterWithName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the CoreImage filter to instantiate.</param>
        <summary>Returns a CIFilter for the specific effect.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
	    
	    On iOS 5.0, the following are the built-in filters:
	    <see cref="T:MonoTouch.CoreImage.CICategoryBlur" />, <see cref="T:MonoTouch.CoreImage.CICategoryColorEffect" />,
	    <see cref="T:MonoTouch.CoreImage.CIAdditionCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CIAffineTransform" />,
	    <see cref="T:MonoTouch.CoreImage.CICheckerboardGenerator" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorBurnBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorControls" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorCube" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorDodgeBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorInvert" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorMatrix" />,
	    <see cref="T:MonoTouch.CoreImage.CIColorMonochrome" />,
	    <see cref="T:MonoTouch.CoreImage.CIConstantColorGenerator" />,
	    <see cref="T:MonoTouch.CoreImage.CICrop" />,
	    <see cref="T:MonoTouch.CoreImage.CIDarkenBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIDifferenceBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIExclusionBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIExposureAdjust" />,
	    <see cref="T:MonoTouch.CoreImage.CIFalseColor" />,
	    <see cref="T:MonoTouch.CoreImage.CIGammaAdjust" />,
	    <see cref="T:MonoTouch.CoreImage.CIGaussianGradient" />,
	    <see cref="T:MonoTouch.CoreImage.CIHardLightBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIHighlightShadowAdjust" />,
	    <see cref="T:MonoTouch.CoreImage.CIHueAdjust" />,
	    <see cref="T:MonoTouch.CoreImage.CIHueBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CILightenBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CILinearGradient" />,
	    <see cref="T:MonoTouch.CoreImage.CILuminosityBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIMaximumCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CIMinimumCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CIMultiplyBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIMultiplyCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CIOverlayBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIRadialGradient" />,
	    <see cref="T:MonoTouch.CoreImage.CISaturationBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CIScreenBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CISepiaTone" />,
	    <see cref="T:MonoTouch.CoreImage.CISoftLightBlendMode" />,
	    <see cref="T:MonoTouch.CoreImage.CISourceAtopCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CISourceInCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CISourceOutCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CISourceOverCompositing" />,
	    <see cref="T:MonoTouch.CoreImage.CIStraightenFilter" />,
	    <see cref="T:MonoTouch.CoreImage.CIStripesGenerator" />,
	    <see cref="T:MonoTouch.CoreImage.CITemperatureAndTint" />,
	    <see cref="T:MonoTouch.CoreImage.CIToneCurve" />,
	    <see cref="T:MonoTouch.CoreImage.CIVibrance" />,
	    <see cref="T:MonoTouch.CoreImage.CIVignette" /> and <see cref="T:MonoTouch.CoreImage.CIWhitePointAdjust" />.
  
	  </para>
          <para>
	    
	    To create a filter of the specified type, instantiate an
	    instance of one of the above types, assign values to their
	    properties and extract the result by using the OutputImage
	    property.
	    
	  </para>
          <example>
            <code lang="C#">
var sepiaFilter = new CISepiaTone () {
  	Image = mySourceImage,
	Intensity = 0.8f
};
	    </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedXMP">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter[] FromSerializedXMP (MonoTouch.Foundation.NSData xmpData, System.Drawing.RectangleF extent, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter[] FromSerializedXMP(class MonoTouch.Foundation.NSData xmpData, valuetype System.Drawing.RectangleF extent, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterArrayFromSerializedXMP:inputImageExtent:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmpData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="extent" Type="System.Drawing.RectangleF" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="xmpData">To be added.</param>
        <param name="extent">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputKeys">
      <MemberSignature Language="C#" Value="public virtual string[] InputKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] InputKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject this[MonoTouch.Foundation.NSString key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject Item(class MonoTouch.Foundation.NSString)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage OutputImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreImage.CIImage OutputImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("outputImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputKeys">
      <MemberSignature Language="C#" Value="public virtual string[] OutputKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] OutputKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("outputKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializedXMP">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSData SerializedXMP (MonoTouch.CoreImage.CIFilter[] filters, System.Drawing.RectangleF extent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSData SerializedXMP(class MonoTouch.CoreImage.CIFilter[] filters, valuetype System.Drawing.RectangleF extent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("serializedXMPFromFilters:inputImageExtent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filters" Type="MonoTouch.CoreImage.CIFilter[]" />
        <Parameter Name="extent" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="filters">To be added.</param>
        <param name="extent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaults">
      <MemberSignature Language="C#" Value="public virtual void SetDefaults ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDefaults() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDefaults")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
