<Type Name="UIImage" FullName="MonoTouch.UIKit.UIImage">
  <TypeSignature Language="C#" Value="public class UIImage : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIImage extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIImage", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Image representation in UIKit, with support for loading, saving and manipulating images.</summary>
    <remarks>
      <para>Image objects do not provide direct access to the underlying image - they are immutable. The methods <see cref="M:MonoTouch.UIKit.UIImage.AsJPEG()" /> or <see cref="M:MonoTouch.UIKit.UIImage.AsPNG()" /> will provide the underlying image data as a JPEG or PNG.</para>
      <para>To avoid issues with excessive memory use, UIImages objects should not be larger than 1024x1024 in size. Code-based manipulations such as resizing are not subject to this restriction.</para>
      <para>It is possible that the system may purge UIImage objects to free up memory. If the UIImage is required later on by an application, it will be loaded again from its source file.</para>
      <para>The following image formats are supported by the UIImage class:
      <list type="bullet"><item><term>.tiff</term></item><item><term>.jpg, .jpeg</term></item><item><term>.gif</term></item><item><term>.bmp</term></item><item><term>.ico</term></item><item><term>.cur</term></item><item><term>.xbm</term></item></list></para>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=064a9ab4-1e58-4cf6-a1c2-aab04997aa57">Example_Drawing</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=6b7f700b-aad2-4d67-a437-3a3482728a1b">Example_Touch</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Media/Images/Merge_Images">Merge Images</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Media/Images/Rotate_An_Image">Rotate An Image</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.CoreGraphics.CGImage cgImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGImage cgImage) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCGImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="cgImage" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="cgImage">A <see cref="MonoTouch.CoreGraphics.CGIImage" /> object.</param>
        <summary>
        </summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.CoreImage.CIImage ciImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreImage.CIImage ciImage) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCIImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="ciImage" Type="MonoTouch.CoreImage.CIImage" />
      </Parameters>
      <Docs>
        <param name="ciImage">A <see cref="MonoTouch.CoreImage.CIImage" /> object.</param>
        <summary>
        </summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData data) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithData:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="MonoTouch.Foundation.NSData" /> object containing the image data.</param>
        <summary>
        </summary>
        <remarks>The <see cref="MonoTouch.Foundation.NSData" /> object must match one of the supported image types.<para tool="threads">This can be used from a background thread.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.UIKit.UIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithContentsOfFile:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">The path to a supported image file.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>The image will not be cached.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.Foundation.NSData data, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData data, float32 scale) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithData:scale:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="scale">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.UIKit.UIEdgeInsets capInsets, MonoTouch.UIKit.UIImageResizingMode resizingMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.UIKit.UIEdgeInsets capInsets, valuetype MonoTouch.UIKit.UIImageResizingMode resizingMode) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("resizableImageWithCapInsets:resizingMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capInsets" Type="MonoTouch.UIKit.UIEdgeInsets" />
        <Parameter Name="resizingMode" Type="MonoTouch.UIKit.UIImageResizingMode" />
      </Parameters>
      <Docs>
        <param name="capInsets">To be added.</param>
        <param name="resizingMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.UIKit.UIImage image, MonoTouch.Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image, class MonoTouch.Foundation.NSDictionary options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithImage:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.CoreGraphics.CGImage cgImage, float scale, MonoTouch.UIKit.UIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGImage cgImage, float32 scale, valuetype MonoTouch.UIKit.UIImageOrientation orientation) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCGImage:scale:orientation:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="cgImage" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="scale" Type="System.Single" />
        <Parameter Name="orientation" Type="MonoTouch.UIKit.UIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="cgImage">The <see cref="T:MonoTouch.CoreGraphics.CGImage " /> to initialize from.</param>
        <param name="scale">The scale factor for the image. A factor of 1.0 is the original size of the image.</param>
        <param name="orientation">The rotation that is to be applied to the image</param>
        <summary>
        </summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (MonoTouch.CoreImage.CIImage ciImage, float scale, MonoTouch.UIKit.UIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreImage.CIImage ciImage, float32 scale, valuetype MonoTouch.UIKit.UIImageOrientation orientation) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCIImage:scale:orientation:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="ciImage" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="scale" Type="System.Single" />
        <Parameter Name="orientation" Type="MonoTouch.UIKit.UIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="ciImage">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="orientation">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlignmentRectInsets">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIEdgeInsets AlignmentRectInsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIEdgeInsets AlignmentRectInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("alignmentRectInsets")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsJPEG">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData AsJPEG ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSData AsJPEG() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Encodes the image with minimal compression (maximum quality) into a <see cref="T:MonoTouch.Foundation.NSData" /> byte blob using the JPEG encoding.</summary>
        <returns>The encoded image in an NSData wrapper or null if there was an error.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsJPEG">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData AsJPEG (float compressionQuality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSData AsJPEG(float32 compressionQuality) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compressionQuality" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="compressionQuality">The compression quality to use, 0.0 is the maximum compression (worse quality), and 1.0 minimum compression (best quality)</param>
        <summary>Encodes the image into a <see cref="T:MonoTouch.Foundation.NSData" /> byte blob using the JPEG encoding.</summary>
        <returns>The encoded image in an NSData wrapper or null if there was an error.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPNG">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData AsPNG ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSData AsPNG() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Encodes the image into a <see cref="T:MonoTouch.Foundation.NSData" /> byte blob using the PNG encoding.</summary>
        <returns>The encoded image in an NSData wrapper or null if there was an error.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CapInsets">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIEdgeInsets CapInsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIEdgeInsets CapInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("capInsets")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The portions of a image that are not resized when the image is stretched. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>This is the size of all four end caps. When specified, the stretchable area is all pixels of the image that are not included by the end caps.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CGImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CGImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreGraphics.CGImage CGImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("CGImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying image data. Read-only.</summary>
        <value>
        </value>
        <remarks>This property may be <see langword="null" /> if the UIImage object was initialized with a <see cref="T:MonoTouch.CoreImage.CIImage" /> object. If the underlying image data was purged, then accessing this property will force the underlying image to be reloaded from the source.<para tool="threads">This can be used from a background thread.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CIImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage CIImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreImage.CIImage CIImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("CIImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying <see cref="T:MonoTouch.CoreImage.CIImage" /> data. Read-only.</summary>
        <value>
        </value>
        <remarks>This propery may be <see langword="null" /> if the UIImage object was initialized with a <see cref="T:MonoTouch.CoreGraphics.CGImage" /> object.<para tool="threads">This can be used from a background thread.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
          <para>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage CreateAnimatedImage (MonoTouch.UIKit.UIImage[] images, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage CreateAnimatedImage(class MonoTouch.UIKit.UIImage[] images, float64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("animatedImageWithImages:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="MonoTouch.UIKit.UIImage[]" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="images">A collection of <see cref="T:MonoTouch.UIKitUIImages" /> to make up the animation.</param>
        <param name="duration">The dureation of the animation in seconds.</param>
        <summary>This method will create a animated image from a collection of images.</summary>
        <returns>
        </returns>
        <remarks>
          <para>The source images should all be the same size and scale.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage CreateAnimatedImage (string name, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage CreateAnimatedImage(string name, float64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("animatedImageNamed:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="name">The path and filename of images to load, without the suffix (i.e. .JPG)</param>
        <param name="duration">How long the animation will last.</param>
        <summary>Creates an animated image from a series of files.</summary>
        <returns>A single animated image.</returns>
        <remarks>All images that are to be loaded should be of the same size and scale. This method will load files by appending an integer (in the range of 0-1024) to the end of file and loading that file.  For example, if <paramref name="name" /> was 'my_image', this method will create an animation of all files from 'my_image0' to 'my_image1024' inclusive.<para tool="threads">This can be used from a background thread.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage CreateAnimatedImage (MonoTouch.UIKit.UIImage[] images, MonoTouch.UIKit.UIEdgeInsets capInsets, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage CreateAnimatedImage(class MonoTouch.UIKit.UIImage[] images, valuetype MonoTouch.UIKit.UIEdgeInsets capInsets, float64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("animatedResizableImageNamed:capInsets:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="MonoTouch.UIKit.UIImage[]" />
        <Parameter Name="capInsets" Type="MonoTouch.UIKit.UIEdgeInsets" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="images">The path and filename of images to load, without the suffix (i.e. .JPG)</param>
        <param name="capInsets">To be added.</param>
        <param name="duration">How long the animation will last.</param>
        <summary>Creates an animated image from a series of files with the end caps applied.</summary>
        <returns>A single animated image.</returns>
        <remarks>All images that are to be loaded should be of the same size and scale. This method will load files by appending an integer (in the range of 0-1024) to the end of file and loading that file.  For example, if <paramref name="name" /> was 'my_image', this method will create an animation of all files from 'my_image0' to 'my_image1024' inclusive.<para tool="threads">This can be used from a background thread.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage CreateAnimatedImage (string name, MonoTouch.UIKit.UIEdgeInsets capInsets, MonoTouch.UIKit.UIImageResizingMode resizingMode, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage CreateAnimatedImage(string name, valuetype MonoTouch.UIKit.UIEdgeInsets capInsets, valuetype MonoTouch.UIKit.UIImageResizingMode resizingMode, float64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("animatedResizableImageNamed:capInsets:resizingMode:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="capInsets" Type="MonoTouch.UIKit.UIEdgeInsets" />
        <Parameter Name="resizingMode" Type="MonoTouch.UIKit.UIImageResizingMode" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="capInsets">To be added.</param>
        <param name="resizingMode">To be added.</param>
        <param name="duration">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResizableImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage CreateResizableImage (MonoTouch.UIKit.UIEdgeInsets capInsets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIImage CreateResizableImage(valuetype MonoTouch.UIKit.UIEdgeInsets capInsets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("resizableImageWithCapInsets:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capInsets" Type="MonoTouch.UIKit.UIEdgeInsets" />
      </Parameters>
      <Docs>
        <param name="capInsets">The cap insets to apply to the image.</param>
        <summary>Creates a new image from the current instance and applies the specified cap insets.</summary>
        <returns>A new image object with the specified cap insets</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentScale">
      <MemberSignature Language="C#" Value="public virtual float CurrentScale { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 CurrentScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scale")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resourced used by the UIImage object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIImage class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UIImage ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype System.Drawing.PointF point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawAtPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">Position where the image will be drawn.</param>
        <summary>Draws the image at the specified position.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawInRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle in which to draw the image.</param>
        <summary>This method will draw the image (scaling as necessary) in the rectangle specified.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (System.Drawing.PointF point, MonoTouch.CoreGraphics.CGBlendMode blendMode, float alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype System.Drawing.PointF point, valuetype MonoTouch.CoreGraphics.CGBlendMode blendMode, float32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawAtPoint:blendMode:alpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="blendMode" Type="MonoTouch.CoreGraphics.CGBlendMode" />
        <Parameter Name="alpha" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="point">The point for the top-left corner of the image.</param>
        <param name="blendMode">The blend mode to use.</param>
        <param name="alpha">The opacity of the image as it is drawn.</param>
        <summary>This method will draw an image starting at the specified point.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (System.Drawing.RectangleF rect, MonoTouch.CoreGraphics.CGBlendMode blendMode, float alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype System.Drawing.RectangleF rect, valuetype MonoTouch.CoreGraphics.CGBlendMode blendMode, float32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawInRect:blendMode:alpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="blendMode" Type="MonoTouch.CoreGraphics.CGBlendMode" />
        <Parameter Name="alpha" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle in which to draw the image (using the coordinate system of the graphics context).</param>
        <param name="blendMode">The blend mode to use.</param>
        <param name="alpha">he opacity of the image as it is drawn</param>
        <summary>This method will draw an image in the specified rectangle.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawAsPatternInRect">
      <MemberSignature Language="C#" Value="public virtual void DrawAsPatternInRect (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawAsPatternInRect(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawAsPatternInRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle in which to draw the image (using the coordinate system of the graphics context).</param>
        <summary>This method will draw an image in the specified rectangle.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public virtual double Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("duration")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The time interval to display the animated image. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>The value is 0.0 for non-animated images.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromBundle">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage FromBundle (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage FromBundle(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Loads an image from the bundle with the specified path name.</param>
        <summary>Loads an image relative to the application bundle, and caches its result.</summary>
        <returns>
        </returns>
        <remarks>
          <para>The underlying UIKit implementation keeps a cache of all images requested.   If you do not want UIKit to keep a cache, use FromFile or FromFileUncached.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage FromFile (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage FromFile(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithContentsOfFile:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Contains the path of the image file to load.</param>
        <summary>Create an image object from the specified file.</summary>
        <returns>A <see cref="T:MonoTouch.UIKit.UIImage" /> object, or <see langword="null" /> if the file could not be found or the image cannot be created.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFileUncached">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage FromFileUncached (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage FromFileUncached(string filename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This is identical to FromFile. Caching is done when using FromBundle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">contains the path of the image file to load.</param>
        <summary>Alias to FromFile, merely with a more explicit name to draw attention to the cache-less nature of this call compared to FromBundle.</summary>
        <returns>
        </returns>
        <remarks>
          <para>Unlike the FromBundle method that keeps a cache of images in memory based on their path name, this method merely loads the image and keeps no internal copies in a cache.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage FromImage (MonoTouch.CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage FromImage(class MonoTouch.CoreGraphics.CGImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithCGImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="image">Contains the Quartz image to use.</param>
        <summary>Creates a new image oject from a Quartz image.</summary>
        <returns>A new image object, or <see langword="null" /> if the image cannot be created.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage FromImage (MonoTouch.CoreImage.CIImage ciImage, float scale, MonoTouch.UIKit.UIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage FromImage(class MonoTouch.CoreImage.CIImage ciImage, float32 scale, valuetype MonoTouch.UIKit.UIImageOrientation orientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithCIImage:scale:orientation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ciImage" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="scale" Type="System.Single" />
        <Parameter Name="orientation" Type="MonoTouch.UIKit.UIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="ciImage">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="orientation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResource">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage FromResource (System.Reflection.Assembly assembly, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage FromResource(class System.Reflection.Assembly assembly, string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assembly">The resource is looked up in this assembly.   If the value is null, the resource is looked up in the assembly that calls this method.</param>
        <param name="name">The name of the embedded resource</param>
        <summary>Loads an image from a resource embedded in the assembly.</summary>
        <returns>The image loaded from the specified assembly.</returns>
        <remarks>If the passed parameter for assembly is null, then the resource is looked up in the calling assembly using <see cref="T:System.Reflection.Assembly.GetCallingAssembly()" /><para tool="threads">This can be used from a background thread.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage[] Images { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIImage[] Images" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("images")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="M:MonoTouch.UIKit.UIImage" /> objects that make up an animated iamge.</summary>
        <value>
        </value>
        <remarks>Will be <see langword="null" /> for a non-animated image.<para tool="threads">This can be used from a background thread.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageWithAlignmentRectInsets">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage ImageWithAlignmentRectInsets (MonoTouch.UIKit.UIEdgeInsets alignmentInsets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIImage ImageWithAlignmentRectInsets(valuetype MonoTouch.UIKit.UIEdgeInsets alignmentInsets) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithAlignmentRectInsets:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignmentInsets" Type="MonoTouch.UIKit.UIEdgeInsets" />
      </Parameters>
      <Docs>
        <param name="alignmentInsets">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftCapWidth">
      <MemberSignature Language="C#" Value="public virtual int LeftCapWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LeftCapWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("leftCapWidth")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage LoadFromData (MonoTouch.Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage LoadFromData(class MonoTouch.Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">The image data to create the image from.</param>
        <summary>Will create an image from data that originated from a file or was programmatically created.</summary>
        <returns>A new image object, or <see langword="null" /> if the image could not be created.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIImage LoadFromData (MonoTouch.Foundation.NSData data, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIImage LoadFromData(class MonoTouch.Foundation.NSData data, float32 scale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithData:scale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="scale">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImageOrientation Orientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIImageOrientation Orientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("imageOrientation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImageOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The orienation of the image. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>The default value is the "up" orientation. If the underlying image has metadata that contains orientation information, then this property will reflect the value of that metadata.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizingMode">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImageResizingMode ResizingMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIImageResizingMode ResizingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("resizingMode")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImageResizingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveToPhotosAlbum">
      <MemberSignature Language="C#" Value="public void SaveToPhotosAlbum (MonoTouch.UIKit.UIImage.SaveStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveToPhotosAlbum(class MonoTouch.UIKit.UIImage/SaveStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="MonoTouch.UIKit.UIImage+SaveStatus" />
      </Parameters>
      <Docs>
        <param name="status">If not-null, a method to invoke when the file has been saved to the Camera Album.</param>
        <summary>Saves the specified image into the Photos Album.</summary>
        <remarks>
          <para>On systems without a camera, the Camera Album is the Saved Photos album instead.   This can not be changed.</para>
          <para>If a non-null value was specified for <paramref name="status" /> then the method is invoked on completion with both the image reference and an if there was an error, a non-null instance of NSError.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIImage Scale (System.Drawing.SizeF newSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIImage Scale(valuetype System.Drawing.SizeF newSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSize" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="newSize">The desired size for the scaled image.</param>
        <summary>Scales the image up or down.</summary>
        <returns>The scaled image.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("size")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The dimensions of the image. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>In iOS 4.0 and higher, this value is in points.  In iOS 3.0 and lower, this value is in pixels.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StretchableImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage StretchableImage (int leftCapWidth, int topCapHeight);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIImage StretchableImage(int32 leftCapWidth, int32 topCapHeight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stretchableImageWithLeftCapWidth:topCapHeight:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftCapWidth" Type="System.Int32" />
        <Parameter Name="topCapHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="leftCapWidth">To be added.</param>
        <param name="topCapHeight">To be added.</param>
        <summary>Creates a stretchable image with the specified parameters.  Deprecated in iOS 5, </summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopCapHeight">
      <MemberSignature Language="C#" Value="public virtual int TopCapHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopCapHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("topCapHeight")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
