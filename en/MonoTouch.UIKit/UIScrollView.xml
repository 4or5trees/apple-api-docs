<Type Name="UIScrollView" FullName="MonoTouch.UIKit.UIScrollView">
  <TypeSignature Language="C#" Value="public class UIScrollView : MonoTouch.UIKit.UIView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIScrollView extends MonoTouch.UIKit.UIView" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIScrollView", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A view that can scroll its children.</summary>
    <remarks>
      <para>UIScrollView is the superclass of several UIKit classes including <see cref="T:MonoTouch.UIKit.UITableView"/> and <see cref="T:MonoTouch.UIKit.UITextView"/>.</para>
      <para>The central notion of a UIScrollView object (or, simply, a scroll view) is that it is a view whose origin is adjustable over the content view. It clips the content to its frame, which generally (but not necessarily) coincides with that of the application’s main window. A scroll view tracks the movements of fingers and adjusts the origin accordingly. The view that is showing its content “through” the scroll view draws that portion of itself based on the new origin, which is pinned to an offset in the content view. The scroll view itself does no drawing except for displaying vertical and horizontal scroll indicators. The scroll view must know the size of the content view so it knows when to stop scrolling; by default, it “bounces” back when scrolling exceeds the bounds of the content.</para>
      <para>The object that manages the drawing of content displayed in a scroll view should tile the content’s subviews so that no view exceeds the size of the screen. As users scroll in the scroll view, this object should add and remove subviews as necessary.</para>
      <para>Because a scroll view has no scroll bars, it must know whether a touch signals an intent to scroll versus an intent to track a subview in the content. To make this determination, it temporarily intercepts a touch-down event by starting a timer and, before the timer fires, seeing if the touching finger makes any movement. If the timer fires without a significant change in position, the scroll view sends tracking events to the touched subview of the content view. If the user then drags their finger far enough before the timer elapses, the scroll view cancels any tracking in the subview and performs the scrolling itself. Subclasses can override the <see cref="M:MonoTouch.UIKit.UIScrollView.TouchesShouldBegin(MonoTouch.Foundation.NSSet, MonoTouch.UIKit.UIEvent, MonoTouch.UIKit.UIView)"/>, <see cref="P:MonoTouch.UIKit.UIScrollView.PagingEnabled"/>, and <see cref="M:MonoTouch.UIKit.UIScrollView.TouchesShouldCancelInContentView(MonoTouch.UIKit.UIView)"/> methods (which are called by the scroll view) to affect how the scroll view handles scrolling gestures.</para>
      <para>A scroll view also handles zooming and panning of content. As the user makes a pinch-in or pinch-out gesture, the scroll view adjusts the offset and the scale of the content. When the gesture ends, the object managing the content view should should update subviews of the content as necessary. (Note that the gesture can end and a finger could still be down.) While the gesture is in progress, the scroll view does not send any tracking calls to the subview.</para>
      <para>The MonoTouch API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.</para>
      <para>The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /> class and assign it to the <see cref="P:MonoTouch.UIKit.Delegate" /> property.   Alternatively, for low-level control, by creating a class derived from <see cref="T:MonoTouch.Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="T:MonoTouch.UIKit.UIScrollView.WeakDelegate" /> property.</para>
      <para>For zooming and panning to work, the delegate must implement both <see cref="M:MonoTouch.UIKit.UIScrollViewDelegate.ViewForZoomingInScrollView(MonoTouch.UIKit.UIScrollView)"/> and <see cref="M:MonoTouch.UIKit.UIScrollViewDelegate.ZoomingEnded(MonoTouch.UIKit.UIScrollView, MonoTouch.UIKit.UIView, System.Single"/>; in addition, the maximum (<see cref="P:MonoTouch.UIKit.UIScrollView.MaximumZoomScale"/>) and minimum ( <see cref="M:MonoTouch.UIKit.UIScrollView.MininumZoomScale"/>) zoom scale must be different.</para>


    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=556b1b8f-088e-494f-bc1a-bd418c174ba3">ZoomingPdfViewer</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Content_Controls/Scroll_View/Create_a_Horizontal_Scrolling_Button_List">Create a Horizontal Scrolling Button List</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIScrollView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIScrollView (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIScrollView (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advatnage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsability to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIScrollView (System.Drawing.RectangleF frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF frame) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UIScrollView with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programatically create a new instance of UIScrollView with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIScrollView (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysBounceHorizontal">
      <MemberSignature Language="C#" Value="public virtual bool AlwaysBounceHorizontal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AlwaysBounceHorizontal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("alwaysBounceHorizontal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAlwaysBounceHorizontal:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that determines whether boucning always occurs when horizontal scrolling reaches the end of the content view.</summary>
        <value></value>
        <remarks>If this property is set to <see langword="true"/> and <see cref="P:MonoTouch.UIKit.UIScrollView.Bounces"/> is <see langword="true"/>, horizontal dragging is allowed even if the content is smaller than the bounds of the scroll view. The default value is <see langword="false"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysBounceVertical">
      <MemberSignature Language="C#" Value="public virtual bool AlwaysBounceVertical { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AlwaysBounceVertical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("alwaysBounceVertical")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAlwaysBounceVertical:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that determines whether bouncing always occures when vertical scrolling reaches the end of the content.</summary>
        <value></value>
        <remarks>If this property is set to <see langword="true"/> and <see cref="P:MonoTouch.UIKit.UIScrollView.Bounces"/> is <see langword="true"/>, horizontal dragging is allowed even if the content is smaller than the bounds of the scroll view. The default value is <see langword="false"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIScrollView.UIScrollViewAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIScrollView/UIScrollViewAppearance Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollView+UIScrollViewAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>Setting any appearance properties on this instance will affect the appearance of all instances of UIScrollView.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIScrollView.UIScrollViewAppearance AppearanceWhenContainedIn (Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIScrollView/UIScrollViewAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollView+UIScrollViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that you want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that you can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where you can set appearance properties for instances of UIScrollView when those instances are contained in the hierarchy specified by the <see paramref="containers" /> parameter.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#">
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounces">
      <MemberSignature Language="C#" Value="public virtual bool Bounces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Bounces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("bounces")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setBounces:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that controls whether the scroll view bounces past the edge of the content and back again.</summary>
        <value></value>
        <remarks>If the value of this property is <see langword="true"/>, the scroll view bounces when it encounters a boundary of the content. Bouncing visually indicates that scrolling has reached an edge of the content. If the value is <see langword="false"/>, scrolling stops immediately at the content boundary without bouncing. The default value is <see langword="true"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BouncesZoom">
      <MemberSignature Language="C#" Value="public virtual bool BouncesZoom { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BouncesZoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("bouncesZoom")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setBouncesZoom:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits.</summary>
        <value></value>
        <remarks>If the value of this property is <see langword="true"/> and zooming exceeds either the maximum or minimum limits for scaling, the scroll view temporarily animates the content scaling just past these limits before returning to them. If this property is<see langword="false"/>, zooming stops immediately at one a scaling limits. The default is <see langword="true"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCancelContentTouches">
      <MemberSignature Language="C#" Value="public virtual bool CanCancelContentTouches { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCancelContentTouches" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("canCancelContentTouches")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setCanCancelContentTouches:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that controls whether touchs in the content view always lead to tracking.</summary>
        <value></value>
        <remarks>If the value of this property is <see langword="true"/> and a view in the content has begun tracking a finger touching it, and if the user drags the finger enough to initiate a scroll, the view receives a <see cref="M:MonoTouch.UIKit.UIGestureRecognizer.TouchesCancelled(MonoTouch.Foundation.NSSet, MonoTouch.UIKit.UIEvent)"/> message and the scroll view handles the touch as a scroll. If the value of this property is <see langword="false"/>, the scroll view does not scroll regardless of finger movement once the content view starts tracking.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentInset">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIEdgeInsets ContentInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIEdgeInsets ContentInset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("contentInset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setContentInset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The distance that the content view is inset from the enclosing scroll view.</summary>
        <value></value>
        <remarks>Use this property to add to the scrolling area around the content. The unit of size is points. The default value is <see cref="T:MonoTouch.UIKit.UIEdgeInsets"/>.Zero.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ContentOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.PointF ContentOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("contentOffset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setContentOffset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.PointF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The point at which the origin of the content view is offset from the origin of the scroll view.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF ContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF ContentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("contentSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setContentSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the content view.</summary>
        <value></value>
        <remarks>The unit of size is points.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decelerating">
      <MemberSignature Language="C#" Value="public virtual bool Decelerating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Decelerating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isDecelerating")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the content is moving in the scroll view after the user lifted their finger. (read-only)</summary>
        <value></value>
        <remarks>The returned value is <see langword="true"/> if the user isn't dragging the content but scrolling is still occuring.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationEnded">
      <MemberSignature Language="C#" Value="public event EventHandler DecelerationEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DecelerationEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationRate">
      <MemberSignature Language="C#" Value="public virtual float DecelerationRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DecelerationRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("decelerationRate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDecelerationRate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A floating-point value that determines the rate of deceleration after the user lifts their finger.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationRateFast">
      <MemberSignature Language="C#" Value="public static float DecelerationRateFast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 DecelerationRateFast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationRateNormal">
      <MemberSignature Language="C#" Value="public static float DecelerationRateNormal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float32 DecelerationRateNormal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler DecelerationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DecelerationStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelaysContentTouches">
      <MemberSignature Language="C#" Value="public virtual bool DelaysContentTouches { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelaysContentTouches" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delaysContentTouches")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelaysContentTouches:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that determines where the scroll view delays the handling of touch-down gestures.</summary>
        <value></value>
        <remarks><para>If the value of this property is <see langword="true"/>, the scroll view delays handling the touch-down gesture until it can determine if scrolling is the intent. If the value is <see langword="false"/>, the scroll view immediately calls <see cref="M:MonoTouch.UIKit.UIScrollView.TouchesShouldBegin(MonoTouch.Foundation.NSSet, MonoTouch.UIKit.UIEvent, MonoTouch.UIKit.UIView"/>. The default value is <see langword="true"/>.</para>
        <para>See the class description for a fuller discussion.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIScrollViewDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIScrollViewDelegate Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollViewDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MonoTouch.UIKit.UIScrollViewDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the MonoTouch.UIKit.UIScrollViewDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, use the WeakDelegate property instead if you want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidZoom">
      <MemberSignature Language="C#" Value="public event EventHandler DidZoom;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidZoom" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectionalLockEnabled">
      <MemberSignature Language="C#" Value="public virtual bool DirectionalLockEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DirectionalLockEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isDirectionalLockEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDirectionalLockEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean valud that determins whether scrolling is disabled in a particular direction.</summary>
        <value></value>
        <remarks>If this property is <see langword="false"/>, scrolling is permitted in both horizontal and vertical directions. If this property is <see langword="true"/> and the user begins dragging in one general direction (horizontally or vertically), the scroll view disables scrolling in the other direction. If the drag direction is diagonal, then scrolling will not be locked and the user can drag in any direction until the drag completes. The default value is <see langword="false"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resourced used by the UIScrollView object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIScrollView class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposting <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UIScrollView ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dragging">
      <MemberSignature Language="C#" Value="public virtual bool Dragging { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Dragging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isDragging")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that indicates whether the user has begun scrolling the content. (read-only)</summary>
        <value></value>
        <remarks>The value held by this property might require some time or distance of scrolling before it is set to <see langword="true"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingEnded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.DraggingEventArgs&gt; DraggingEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.DraggingEventArgs&gt; DraggingEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.DraggingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingStarted">
      <MemberSignature Language="C#" Value="public event EventHandler DraggingStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DraggingStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlashScrollIndicators">
      <MemberSignature Language="C#" Value="public virtual void FlashScrollIndicators ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FlashScrollIndicators() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("flashScrollIndicators")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays the scroll indicators momentarily.</summary>
        <remarks>You should call this method whenever you bring the scroll view to front.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndicatorStyle">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIScrollViewIndicatorStyle IndicatorStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIScrollViewIndicatorStyle IndicatorStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("indicatorStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setIndicatorStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollViewIndicatorStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The style of the scroll indicators.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumZoomScale">
      <MemberSignature Language="C#" Value="public virtual float MaximumZoomScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MaximumZoomScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("maximumZoomScale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMaximumZoomScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A floating-point value that specifies the maximum scale factor that can be applied to the scroll view's content.</summary>
        <value></value>
        <remarks>This value determins how large the content can be scaled. It must be greater than the minimum zoom scale for zooming to be enabled. The default value is 1.0.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumZoomScale">
      <MemberSignature Language="C#" Value="public virtual float MinimumZoomScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MinimumZoomScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("minimumZoomScale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMinimumZoomScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A floating-point valud that specifies the mininum scale fator that can be applied to the scroll view's content.</summary>
        <value></value>
        <remarks>This value determines how small the content can be scaled. The default value is 1.0.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PagingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool PagingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isPagingEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPagingEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that determines whether paging is enabled for the scroll view.</summary>
        <value></value>
        <remarks>If the value of this property is <see langword="true"/>, the scroll view stops on multiples of the scroll view's bounds when the user scrolls. The default value is <see langword="false"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PanGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIPanGestureRecognizer PanGestureRecognizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPanGestureRecognizer PanGestureRecognizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("panGestureRecognizer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPanGestureRecognizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying gesture recognizer for pan gestures.  (read-only)</summary>
        <value></value>
        <remarks>Your application accessess this property when it wants to more precisely control which pan gestures are recognized by the scroll view.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PinchGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIPinchGestureRecognizer PinchGestureRecognizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPinchGestureRecognizer PinchGestureRecognizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pinchGestureRecognizer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPinchGestureRecognizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying gesture recognizer for pinch gestures.  (read-only)</summary>
        <value></value>
        <remarks>Your application accesses this property when it wants to more precisely control which pinch gestures are recognized by the scroll view.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAnimationEnded">
      <MemberSignature Language="C#" Value="public event EventHandler ScrollAnimationEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ScrollAnimationEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrolled">
      <MemberSignature Language="C#" Value="public event EventHandler Scrolled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Scrolled" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrolledToTop">
      <MemberSignature Language="C#" Value="public event EventHandler ScrolledToTop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ScrolledToTop" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ScrollEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isScrollEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScrollEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that determines whether scrolling is enabled.</summary>
        <value></value>
        <remarks><para>If the value of this property is <see langword="true"/>, scrolling is enabled, and if it is <see langword="false"/>, scrolling is disabled. The default is <see langword="true"/>.</para>
        <para>When scrolling is disabled, the scroll view does not accept touch events; it forwards them up the responder chain.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollIndicatorInsets">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIEdgeInsets ScrollIndicatorInsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIEdgeInsets ScrollIndicatorInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scrollIndicatorInsets")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScrollIndicatorInsets:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The distance the scroll indicators are inset from the edge of the scroll view.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollRectToVisible">
      <MemberSignature Language="C#" Value="public virtual void ScrollRectToVisible (System.Drawing.RectangleF rect, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollRectToVisible(valuetype System.Drawing.RectangleF rect, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollRectToVisible:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle defining an area of the content view.</param>
        <param name="animated"><see langword="true"/> if the scrolling should be animated, <see langword="false"/> if it should be immediate.</param>
        <summary>Scrolls a specific area of the content so that it is visible in the receiver.</summary>
        <remarks>This method scrolls the content view so that the area defined by rect is just visible inside the scroll view. If the area is already visible, the method does nothing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollsToTop">
      <MemberSignature Language="C#" Value="public virtual bool ScrollsToTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollsToTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scrollsToTop")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScrollsToTop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that controls whether the scroll-to-top gesture is effective.</summary>
        <value></value>
        <remarks><para>The scroll-to-top gesture is a tap on the status bar; when this property is YES, the scroll view jumps to the top of the content when this gesture occurs. The default value of this property is <see langword="true"/>.</para>
        <para>This gesture works on a single visible scroll view; if there are multiple scroll views (for example, a date picker) with this property set, or if the delegate returns <see langword="false"/> in <see cref="M:MonoTouch.UIKit.UIScrollViewDelegate.ShouldScrollToTop(MonoTouch.UIKit.UIScrollView)"/>, UIScrollView ignores the request. After the scroll view scrolls to the top of the content view, it sends the delegate a <see cref="M:MonoTouch.UIKit.UIScrollViewDelegate.ShouldScrollToTop(MonoTouch.UIKit.UIScrollView)"/> message.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContentOffset">
      <MemberSignature Language="C#" Value="public virtual void SetContentOffset (System.Drawing.PointF contentOffset, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentOffset(valuetype System.Drawing.PointF contentOffset, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setContentOffset:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentOffset" Type="System.Drawing.PointF" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="contentOffset">A point (expressed in points) that is offset from the content view’s origin.</param>
        <param name="animated"><see langword="true"/> to animate the transition at a constant velocity to the new offset, <see langword="false"/> to make the transition immediate.</param>
        <summary>Sets the offset from the content view’s origin that corresponds to the receiver’s origin.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetZoomScale">
      <MemberSignature Language="C#" Value="public virtual void SetZoomScale (float scale, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetZoomScale(float32 scale, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setZoomScale:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scale" Type="System.Single" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scale">The new value to scale the content to.</param>
        <param name="animated"><see langword="true"/> to animate the transition to the new scale, <see langword="false"/> to make the transition immediate.</param>
        <summary></summary>
        <remarks>The new scale value should be between <see cref="P:MonoTouch.UIKit.UIScrollView.MinimumZoomScale"/> and <see cref="P:MonTouch.UIKit.UIScrollView.MaximumZoomScale"/></remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldScrollToTop">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIScrollViewCondition ShouldScrollToTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIScrollViewCondition ShouldScrollToTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollViewCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>\</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsHorizontalScrollIndicator">
      <MemberSignature Language="C#" Value="public virtual bool ShowsHorizontalScrollIndicator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsHorizontalScrollIndicator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsHorizontalScrollIndicator")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsHorizontalScrollIndicator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that controls whether the horizontal scroll indicator is visible.</summary>
        <value></value>
        <remarks>The default value is <see langword="true"/>. The indicator is visible while tracking is underway and fades out after tracking.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsVerticalScrollIndicator">
      <MemberSignature Language="C#" Value="public virtual bool ShowsVerticalScrollIndicator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsVerticalScrollIndicator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsVerticalScrollIndicator")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsVerticalScrollIndicator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that controlls whether the vertical scroll indicator is visible.</summary>
        <value></value>
        <remarks>The default value is <see langword="true"/>. The indicator is visible while tracking is underway and fades out after tracking.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesShouldBegin">
      <MemberSignature Language="C#" Value="public virtual bool TouchesShouldBegin (MonoTouch.Foundation.NSSet touches, MonoTouch.UIKit.UIEvent withEvent, MonoTouch.UIKit.UIView inContentView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TouchesShouldBegin(class MonoTouch.Foundation.NSSet touches, class MonoTouch.UIKit.UIEvent withEvent, class MonoTouch.UIKit.UIView inContentView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("touchesShouldBegin:withEvent:inContentView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="withEvent" Type="MonoTouch.UIKit.UIEvent" />
        <Parameter Name="inContentView" Type="MonoTouch.UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="touches">A set of <see cref="MonoTouch.UIKit.UITouch"/> instances that represent the touches for the starting phase of the event represented by event.</param>
        <param name="withEvent">An object representing the event to which the touch objects in touches belong.</param>
        <param name="inContentView">The subview in the content where the touch-down gesture occurred.</param>
        <summary>Overridden by subclasses to customize the default behavior when a finger touches down in displayed content.</summary>
        <returns>Return <see langword="false"/> if you don’t want the scroll view to send event messages to view. If you want view to receive those messages, return <see langword="true"/> (the default).</returns>
        <remarks>The default behavior of UIScrollView is to invoke the <see cref="T:MonoTouch.UIKit.UIResponder"/> event-handling methods of the target subview that the touches occur in.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesShouldCancelInContentView">
      <MemberSignature Language="C#" Value="public virtual bool TouchesShouldCancelInContentView (MonoTouch.UIKit.UIView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TouchesShouldCancelInContentView(class MonoTouch.UIKit.UIView view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("touchesShouldCancelInContentView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="view">The view object in the content that is being touched.</param>
        <summary>Returns whether to cancel touches related to the content subview and start dragging.</summary>
        <returns><see langword="true"/> to cancel further touch messages to view, <see langword="false"/> to have view continue to receive those messages. The default returned value is <see langword="true"/> if view is not a <see cref="T:MonoTouch.UIKit.UIControl"/> object; otherwise, it returns <see langword="false"/>.</returns>
        <remarks>The scroll view calls this method just after it starts sending tracking messages to the content view. If it receives <see langword="false"/> from this method, it stops dragging and forwards the touch events to the content subview. The scroll view does not call this method if the value of the <see cref="MonoTouch.UIKit.UIScrollView.CanCancelContentTouches"/> property is <see langword="false"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tracking">
      <MemberSignature Language="C#" Value="public virtual bool Tracking { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Tracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isTracking")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether the user has touched the content to initiate scrolling. (read-only)</summary>
        <value></value>
        <remarks>The value of this property is <see langword="true"/> if the user has touched the content view but might not have yet have started dragging it.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewForZoomingInScrollView">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIScrollViewGetZoomView ViewForZoomingInScrollView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIScrollViewGetZoomView ViewForZoomingInScrollView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollViewGetZoomView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value></value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delegate", MonoTouch.ObjCRuntime.ArgumentSemantic.Assign)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelegate:", MonoTouch.ObjCRuntime.ArgumentSemantic.Assign)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillEndDragging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.WillEndDraggingEventArgs&gt; WillEndDragging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.WillEndDraggingEventArgs&gt; WillEndDragging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.WillEndDraggingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomBouncing">
      <MemberSignature Language="C#" Value="public virtual bool ZoomBouncing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ZoomBouncing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isZoomBouncing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that indicates that zooming has exceeded the scaling limts specified for the receiver. (read-only)</summary>
        <value></value>
        <remarks>The value of this property is <see langword="true"/> if the scroll view is zooming back to a minimum or maximum zoom scaling value; otherwise the value is <see langword="true"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zooming">
      <MemberSignature Language="C#" Value="public virtual bool Zooming { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Zooming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isZooming")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Boolean value that indicates whether the content view is currently zooming in or out. (read-only)</summary>
        <value></value>
        <remarks>The value of this property is <see langword="true"/> if user is making a zoom gesture, otherwise it is <see langword="false"/>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingEnded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.ZoomingEndedEventArgs&gt; ZoomingEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.ZoomingEndedEventArgs&gt; ZoomingEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.ZoomingEndedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.UIScrollViewZoomingEventArgs&gt; ZoomingStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.UIScrollViewZoomingEventArgs&gt; ZoomingStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.UIScrollViewZoomingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomScale">
      <MemberSignature Language="C#" Value="public virtual float ZoomScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ZoomScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("zoomScale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setZoomScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A floating-point value that specifies the current scale factor applied to the scroll view's content.</summary>
        <value></value>
        <remarks>This value determines how much the content is currently scaled. The default value is 1.0.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomToRect">
      <MemberSignature Language="C#" Value="public virtual void ZoomToRect (System.Drawing.RectangleF rect, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ZoomToRect(valuetype System.Drawing.RectangleF rect, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("zoomToRect:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle defining an area of the content view.</param>
        <param name="animated"><see langword="true"/> if the scrolling should be animated, <see langword="false"/> if it should be immediate.</param>
        <summary>Zooms to a specific area of the content so that it is visible in the receiver.</summary>
        <remarks>This method zooms so that the content view becomes the area defined by rect, adjusting the <see cref="P:MonoTouch.UIKit.UIScrollView.ZoomScale"/> as necessary.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
