<Type Name="UIFontDescriptor" FullName="MonoTouch.UIKit.UIFontDescriptor">
  <TypeSignature Language="C#" Value="public class UIFontDescriptor : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIFontDescriptor extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIFontDescriptor", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes properties of a font, use to create fonts with certain features.   Provides ways of finding fonts matching a description as well.</summary>
    <remarks>

      <para> Developers create UIFontDescriptors with a set of
	parameters they are interested in (font faces, font families,
	font attributes, fallbacks).  You can consider these
	descriptors queries, which you can later use to create a
	concrete UIFont wit by using the <see
	cref="M:MonoTouch.UIKit.UIFont.FromDescriptor"/> method.
	</para>


      <para>

	These objects are immutable, once created, they can not be
	changed.  But given a UIFontDescriptor, you can create a more
	precise font descriptor instance with new information.  You
	can create a new UIFontDescriptor with more detailed font
	attributes using the <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithAttributes"/>
	method, extend one by explicitly setting a font face or font family using the <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithFace"/> and <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithFamily"/> methods, specify a desired font size or a transformation matrix with the <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithSize"/> and <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithMatrix"/> methods, or request that certain stylistic traits be present with <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithTraits"/>.

      </para>

      <para>
	
	You should use the <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.PreferredForStyle"/>
	method to obtain a UIFontDescriptor for the common font
	presets.  This method will return a UIFontDescriptor that
	contains the properties based on the user global preference on
	their device.

      </para>

      <para>

	You can use the <see
	cref="M:MonoTouch.UIKit.UIFontDescriptor.GetMatchingFontDescriptorsWithMandatoryKeys"/>
	method to get a set of UIFontDescriptors that match your
	current query.

      </para>

      <para>
	The following example shows how to create two fonts: one with
	the preferred font for body text, and then a bold version of
	the same font:
      </para>

      <example>
	<code lang="c#">

// Creates a UIFont for the body text
var bodyDescriptor = UIFontDescriptor.PreferredForStyle (UIFontTextStyle.Body);
UIFont bodyFont = UIFont.FromDescriptor (bodyDescriptor, pointSize: 0);
	  
// Creates a bold version of it:
var boldDescritptor = bodyDescriptor.CreateWithTraits (UIFontDescriptorSymbolicTraits.Bold);
UIFont boldBodyFont = UIFont.FromDescriptor (bodyDescriptor, 0);

	</code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFontAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">List of desired font attributes.</param>
        <summary>Creates a font descriptor using the specified font attributes.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes (MonoTouch.Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes(class MonoTouch.Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorByAddingAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">dictionary containing the attributes.</param>
        <summary>Creates a new UIFontDescriptor based on adding the provided attributes to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added attributes.</returns>
        <remarks>Use the strongly typed version instead.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithAttributes">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes (MonoTouch.UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes(class MonoTouch.UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">dictionary containing the attributes.</param>
        <summary>Creates a new UIFontDescriptor based on adding the provided attributes to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added attributes.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithFace">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithFace (string newFace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithFace(string newFace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithFace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newFace">New font face to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a font face to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font face.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithFamily">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithFamily (string newFamily);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithFamily(string newFamily) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithFamily:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFamily" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newFamily">New font family to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a font family to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font family.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithMatrix">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithMatrix (MonoTouch.CoreGraphics.CGAffineTransform matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithMatrix(valuetype MonoTouch.CoreGraphics.CGAffineTransform matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithMatrix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="matrix">New transofmration matrix to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new transformation matrix to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added transformation matrix.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithSize">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithSize (float newPointSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithSize(float32 newPointSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPointSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="newPointSize">New desired font size for the descriptor.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new font size to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font size.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithTraits">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithTraits (MonoTouch.UIKit.UIFontDescriptorSymbolicTraits symbolicTraits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithTraits(valuetype MonoTouch.UIKit.UIFontDescriptorSymbolicTraits symbolicTraits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithSymbolicTraits:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbolicTraits" Type="MonoTouch.UIKit.UIFontDescriptorSymbolicTraits" />
      </Parameters>
      <Docs>
        <param name="symbolicTraits">New desired stylistic traits for the descriptor.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new symbolic traits to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added symbolic traits.</returns>
        <remarks>Traits include attributes like bold, italic, condensed, monospace, vertical, optimized for the UI, </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIFontDescriptor object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIFontDescriptor class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UIFontDescriptor ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontAttributes">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontAttributes FontAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIFontAttributes FontAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font attributes.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAttributes">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromAttributes (MonoTouch.Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromAttributes(class MonoTouch.Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithFontAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>(Weak) Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAttributes">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromAttributes (MonoTouch.UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromAttributes(class MonoTouch.UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromName (string fontName, MonoTouch.CoreGraphics.CGAffineTransform matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromName(string fontName, valuetype MonoTouch.CoreGraphics.CGAffineTransform matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithName:matrix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fontName" Type="System.String" />
        <Parameter Name="matrix" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="fontName">Font name.</param>
        <param name="matrix">Transformation matrix.</param>
        <summary>Creates a UIFontDescriptor using the specified name and transformation matrix.</summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromName (string fontName, float size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromName(string fontName, float32 size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithName:size:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fontName" Type="System.String" />
        <Parameter Name="size" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="fontName">Font name.</param>
        <param name="size">Font size.</param>
        <summary>Creates a UIFontDescriptor using the specified name and font size.</summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingFontDescriptorsWithMandatoryKeys">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor[] GetMatchingFontDescriptorsWithMandatoryKeys (MonoTouch.Foundation.NSSet mandatoryKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor[] GetMatchingFontDescriptorsWithMandatoryKeys(class MonoTouch.Foundation.NSSet mandatoryKeys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("matchingFontDescriptorsWithMandatoryKeys:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mandatoryKeys" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="mandatoryKeys">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject GetObject (MonoTouch.Foundation.NSString anAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject GetObject(class MonoTouch.Foundation.NSString anAttribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("objectForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anAttribute" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="anAttribute">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Matrix">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGAffineTransform Matrix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGAffineTransform Matrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("matrix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Transformation matrix for the descriptor.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PointSize">
      <MemberSignature Language="C#" Value="public virtual float PointSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PointSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pointSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Point size in the descriptor.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PostscriptName">
      <MemberSignature Language="C#" Value="public virtual string PostscriptName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostscriptName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("postscriptName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font's PostScript name.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredForStyle">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredForStyle (MonoTouch.Foundation.NSString uiFontTextStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor PreferredForStyle(class MonoTouch.Foundation.NSString uiFontTextStyle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("preferredFontDescriptorWithTextStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="style">Desired style (one of the TextStyle static properties in this class).</param>
        <summary>(Weak) Returns a UIFontDescriptor suitable for the specified UIFontTextStyle using the user's desired font and size.</summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredForStyle">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredForStyle (MonoTouch.UIKit.UIFontTextStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor PreferredForStyle(valuetype MonoTouch.UIKit.UIFontTextStyle style) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="MonoTouch.UIKit.UIFontTextStyle" />
      </Parameters>
      <Docs>
        <param name="style">Desired style.</param>
        <summary>Returns a UIFontDescriptor suitable for the specified UIFontTextStyle using the user's desired font and size.</summary>
        <returns></returns>
        <remarks>
	  <para>
	    This method supports iOS Dynamic Style fonts by returning
	    UIFontDescriptors that contains both the user desired size
	    combined with the system font for the specified style.
	  </para>
      <example>
	<code lang="c#">

// Creates a UIFont for the body text
var bodyDescriptor = UIFontDescriptor.PreferredForStyle (UIFontTextStyle.Body);
UIFont bodyFont = UIFont.FromDescriptor (bodyDescriptor, pointSize: 0);
	</code>
      </example>
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolicTraits">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptorSymbolicTraits SymbolicTraits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIFontDescriptorSymbolicTraits SymbolicTraits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("symbolicTraits")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptorSymbolicTraits</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyleBody">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextStyleBody { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextStyleBody" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UIFontTextStyleBody", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIFontTextStyleBody</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyleCaption1">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextStyleCaption1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextStyleCaption1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UIFontTextStyleCaption1", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIFontTextStyleCaption1</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyleCaption2">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextStyleCaption2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextStyleCaption2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UIFontTextStyleCaption2", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIFontTextStyleCaption2</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyleFootnote">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextStyleFootnote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextStyleFootnote" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UIFontTextStyleFootnote", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIFontTextStyleFootnote</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyleHeadline">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextStyleHeadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextStyleHeadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UIFontTextStyleHeadline", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIFontTextStyleHeadline</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyleSubheadline">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextStyleSubheadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextStyleSubheadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UIFontTextStyleSubheadline", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIFontTextStyleSubheadline</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakFontAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary WeakFontAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary WeakFontAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("fontAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>(Weak) font attributes.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>



