<Type Name="NSLayoutDimension" FullName="MonoTouch.UIKit.NSLayoutDimension">
  <TypeSignature Language="C#" Value="public class NSLayoutDimension : MonoTouch.UIKit.NSLayoutAnchor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutDimension extends MonoTouch.UIKit.NSLayoutAnchor" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.NSLayoutAnchor</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSLayoutDimension", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A factory class that creates <see cref="T:MonoTouch.UIKit.NSLayoutConstraint" /> objects by way of a fluent API.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSLayoutDimension (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutDimension (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSLayoutDimension (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutDimension (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSLayoutDimension (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualToAnchor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, float multiplier);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, float32 multiplier) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, nfloat multiplier);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintEqualToAnchor:multiplier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="MonoTouch.UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="classic" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="anchor">To be added.</param>
        <param name="multiplier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualToAnchor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, float multiplier, float constant);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, float32 multiplier, float32 constant) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, nfloat multiplier, nfloat constant);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintEqualToAnchor:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="MonoTouch.UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="classic" />
        <Parameter Name="constant" Type="System.Single" apistyle="classic" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="anchor">To be added.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualToConstant">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToConstant (float constant);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToConstant(float32 constant) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToConstant (nfloat constant);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintEqualToConstant(valuetype System.nfloat constant) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintEqualToConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.Single" apistyle="classic" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualToAnchor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, float multiplier);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, float32 multiplier) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, nfloat multiplier);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintGreaterThanOrEqualToAnchor:multiplier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="MonoTouch.UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="classic" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="anchor">To be added.</param>
        <param name="multiplier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualToAnchor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, float multiplier, float constant);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, float32 multiplier, float32 constant) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, nfloat multiplier, nfloat constant);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintGreaterThanOrEqualToAnchor:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="MonoTouch.UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="classic" />
        <Parameter Name="constant" Type="System.Single" apistyle="classic" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="anchor">To be added.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualToConstant">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToConstant (float constant);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToConstant(float32 constant) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToConstant (nfloat constant);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualToConstant(valuetype System.nfloat constant) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintGreaterThanOrEqualToConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.Single" apistyle="classic" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualToAnchor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, float multiplier);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, float32 multiplier) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, nfloat multiplier);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintLessThanOrEqualToAnchor:multiplier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="MonoTouch.UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="classic" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="anchor">To be added.</param>
        <param name="multiplier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualToAnchor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, float multiplier, float constant);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, float32 multiplier, float32 constant) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor (MonoTouch.UIKit.NSLayoutDimension anchor, nfloat multiplier, nfloat constant);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToAnchor(class MonoTouch.UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintLessThanOrEqualToAnchor:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="MonoTouch.UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="classic" />
        <Parameter Name="constant" Type="System.Single" apistyle="classic" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="anchor">To be added.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualToConstant">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToConstant (float constant);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToConstant(float32 constant) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToConstant (nfloat constant);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.NSLayoutConstraint ConstraintLessThanOrEqualToConstant(valuetype System.nfloat constant) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintLessThanOrEqualToConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.Single" apistyle="classic" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>