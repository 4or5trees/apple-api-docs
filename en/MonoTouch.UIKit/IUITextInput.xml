<Type Name="IUITextInput" FullName="MonoTouch.UIKit.IUITextInput">
  <TypeSignature Language="C#" Value="public interface IUITextInput : IDisposable, MonoTouch.UIKit.IUIKeyInput" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUITextInput implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUIKeyInput, class MonoTouch.UIKit.IUITextInputTraits, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUIKeyInput</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol(Name="UITextInput", WrapperType=typeof(MonoTouch.UIKit.UITextInputWrapper))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginningOfDocument">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition BeginningOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextPosition BeginningOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("beginningOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparePosition">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSComparisonResult ComparePosition (MonoTouch.UIKit.UITextPosition first, MonoTouch.UIKit.UITextPosition second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSComparisonResult ComparePosition(class MonoTouch.UIKit.UITextPosition first, class MonoTouch.UIKit.UITextPosition second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("comparePosition:toPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="second" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="first">To be added.</param>
        <param name="second">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfDocument">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition EndOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextPosition EndOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("endOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseWritingDirection">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextWritingDirection GetBaseWritingDirection (MonoTouch.UIKit.UITextPosition forPosition, MonoTouch.UIKit.UITextStorageDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UITextWritingDirection GetBaseWritingDirection(class MonoTouch.UIKit.UITextPosition forPosition, valuetype MonoTouch.UIKit.UITextStorageDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("baseWritingDirectionForPosition:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextWritingDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextStorageDirection" />
      </Parameters>
      <Docs>
        <param name="forPosition">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCaretRectForPosition">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetCaretRectForPosition (MonoTouch.UIKit.UITextPosition position);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetCaretRectForPosition(class MonoTouch.UIKit.UITextPosition position) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGRect GetCaretRectForPosition (MonoTouch.UIKit.UITextPosition position);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetCaretRectForPosition(class MonoTouch.UIKit.UITextPosition position) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("caretRectForPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRange">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextRange GetCharacterRange (MonoTouch.UIKit.UITextPosition byExtendingPosition, MonoTouch.UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRange(class MonoTouch.UIKit.UITextPosition byExtendingPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterRangeByExtendingPosition:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byExtendingPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="byExtendingPosition">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRangeAtPoint">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint (System.Drawing.PointF point);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint(valuetype System.Drawing.PointF point) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint (MonoTouch.CoreGraphics.CGPoint point);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterRangeAtPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (System.Drawing.PointF point);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype System.Drawing.PointF point) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (MonoTouch.CoreGraphics.CGPoint point);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("closestPositionToPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (System.Drawing.PointF point, MonoTouch.UIKit.UITextRange withinRange);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype System.Drawing.PointF point, class MonoTouch.UIKit.UITextRange withinRange) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (MonoTouch.CoreGraphics.CGPoint point, MonoTouch.UIKit.UITextRange withinRange);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.UIKit.UITextRange withinRange) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("closestPositionToPoint:withinRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="withinRange" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="withinRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstRectForRange">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetFirstRectForRange (MonoTouch.UIKit.UITextRange range);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetFirstRectForRange(class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGRect GetFirstRectForRange (MonoTouch.UIKit.UITextRange range);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetFirstRectForRange(class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("firstRectForRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOffsetFromPosition">
      <MemberSignature Language="C#" Value="public int GetOffsetFromPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetOffsetFromPosition(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nint GetOffsetFromPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetOffsetFromPosition(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("offsetFromPosition:toPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">To be added.</param>
        <param name="toPosition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, int offset);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, int32 offset) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, nint offset);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype System.nint offset) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionFromPosition:offset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="fromPosition">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextLayoutDirection inDirection, int offset);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection inDirection, int32 offset) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextLayoutDirection inDirection, nint offset);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection inDirection, valuetype System.nint offset) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionFromPosition:inDirection:offset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="inDirection" Type="MonoTouch.UIKit.UITextLayoutDirection" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="fromPosition">To be added.</param>
        <param name="inDirection">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionWithinRange">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextPosition GetPositionWithinRange (MonoTouch.UIKit.UITextRange range, MonoTouch.UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPositionWithinRange(class MonoTouch.UIKit.UITextRange range, valuetype MonoTouch.UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionWithinRange:farthestInDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelectionRects">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextSelectionRect[] GetSelectionRects (MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextSelectionRect[] GetSelectionRects(class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("selectionRectsForRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextSelectionRect[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextRange">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextRange GetTextRange (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetTextRange(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textRangeFromPosition:toPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">To be added.</param>
        <param name="toPosition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextRange">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextRange MarkedTextRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextRange MarkedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("markedTextRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextStyle">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSDictionary MarkedTextStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary MarkedTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("markedTextStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMarkedTextStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceText">
      <MemberSignature Language="C#" Value="public void ReplaceText (MonoTouch.UIKit.UITextRange range, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceText(class MonoTouch.UIKit.UITextRange range, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("replaceRange:withText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedTextRange">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextRange SelectedTextRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextRange SelectedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("selectedTextRange")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSelectedTextRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBaseWritingDirectionforRange">
      <MemberSignature Language="C#" Value="public void SetBaseWritingDirectionforRange (MonoTouch.UIKit.UITextWritingDirection writingDirection, MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBaseWritingDirectionforRange(valuetype MonoTouch.UIKit.UITextWritingDirection writingDirection, class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setBaseWritingDirection:forRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writingDirection" Type="MonoTouch.UIKit.UITextWritingDirection" />
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="writingDirection">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMarkedText">
      <MemberSignature Language="C#" Value="public void SetMarkedText (string markedText, MonoTouch.Foundation.NSRange selectedRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMarkedText(string markedText, valuetype MonoTouch.Foundation.NSRange selectedRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setMarkedText:selectedRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="markedText" Type="System.String" />
        <Parameter Name="selectedRange" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="markedText">To be added.</param>
        <param name="selectedRange">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInRange">
      <MemberSignature Language="C#" Value="public string TextInRange (MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TextInRange(class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textInRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmarkText">
      <MemberSignature Language="C#" Value="public void UnmarkText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnmarkText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unmarkText")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakInputDelegate">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject WeakInputDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakInputDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputDelegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setInputDelegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakTokenizer">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject WeakTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tokenizer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
