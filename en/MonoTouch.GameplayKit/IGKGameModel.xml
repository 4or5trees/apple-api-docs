<Type Name="IGKGameModel" FullName="MonoTouch.GameplayKit.IGKGameModel">
  <TypeSignature Language="C#" Value="public interface IGKGameModel : IDisposable, MonoTouch.Foundation.INSCopying" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGKGameModel implements class MonoTouch.Foundation.INSCopying, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol(Name="GKGameModel", WrapperType=typeof(MonoTouch.GameplayKit.GKGameModelWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetPlayers", ReturnType=typeof(MonoTouch.GameplayKit.IGKGameModelPlayer[]), Selector="players")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetActivePlayer", ReturnType=typeof(MonoTouch.GameplayKit.IGKGameModelPlayer), Selector="activePlayer")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetGameModel", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setGameModel:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetGameModelUpdates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(MonoTouch.GameplayKit.IGKGameModelUpdate[]), Selector="gameModelUpdatesForPlayer:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ApplyGameModelUpdate", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="applyGameModelUpdate:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetScore", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nint), Selector="scoreForPlayer:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="IsWin", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="isWinForPlayer:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="IsLoss", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="isLossForPlayer:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_1 | MonoTouch.ObjCRuntime.Platform.Mac_10_2 | MonoTouch.ObjCRuntime.Platform.Mac_10_3 | MonoTouch.ObjCRuntime.Platform.Mac_10_4 | MonoTouch.ObjCRuntime.Platform.Mac_10_5 | MonoTouch.ObjCRuntime.Platform.Mac_10_6 | MonoTouch.ObjCRuntime.Platform.Mac_10_7 | MonoTouch.ObjCRuntime.Platform.Mac_10_8 | MonoTouch.ObjCRuntime.Platform.Mac_10_9 | MonoTouch.ObjCRuntime.Platform.Mac_10_10 | MonoTouch.ObjCRuntime.Platform.Mac_10_10_3 | MonoTouch.ObjCRuntime.Platform.Mac_10_11 | MonoTouch.ObjCRuntime.Platform.Mac_Version | MonoTouch.ObjCRuntime.Platform.Mac_Arch64 | MonoTouch.ObjCRuntime.Platform.Mac_Arch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The current game state. Particularly useful in conjunction with <see cref="T:Monotouch.GameplayKit.GKMinMaxStrategist"/>.</summary>
    <remarks>
      <para>When <see cref="T:Monotouch.GameplayKit.GKMinMaxStrategist"/> is used as an AI opponent, it uses <see cref="T:Monotouch.Gameplay.IGKGameModel"/> objects to describe the game's state and <see cref="T:Monotouch.GameplayKit.IGKGameModelUpdate"/> objects to describe potential moves. (See the "AI Opponent" section in the remarks at <see cref="N:Monotouch.GameplayKit"/>)</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplyGameModelUpdate">
      <MemberSignature Language="C#" Value="public void ApplyGameModelUpdate (MonoTouch.GameplayKit.IGKGameModelUpdate gameModelUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyGameModelUpdate(class MonoTouch.GameplayKit.IGKGameModelUpdate gameModelUpdate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("applyGameModelUpdate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameModelUpdate" Type="MonoTouch.GameplayKit.IGKGameModelUpdate" />
      </Parameters>
      <Docs>
        <param name="gameModelUpdate">An object that describes a valid move from the current state of <c>this</c>.</param>
        <summary>Modifies the internal state of this <see cref="T:Monotouch.GameplayKit.IGKGameModel" /> according to the move described in <param name="gameModelUpdate" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivePlayer">
      <MemberSignature Language="C#" Value="public MonoTouch.GameplayKit.IGKGameModelPlayer GetActivePlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.GameplayKit.IGKGameModelPlayer GetActivePlayer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("activePlayer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.GameplayKit.IGKGameModelPlayer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The current <see cref="T:Monotouch.GameplayKit.IGKGameModelPlayer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGameModelUpdates">
      <MemberSignature Language="C#" Value="public MonoTouch.GameplayKit.IGKGameModelUpdate[] GetGameModelUpdates (MonoTouch.GameplayKit.IGKGameModelPlayer player);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.GameplayKit.IGKGameModelUpdate[] GetGameModelUpdates(class MonoTouch.GameplayKit.IGKGameModelPlayer player) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("gameModelUpdatesForPlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.GameplayKit.IGKGameModelUpdate[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="MonoTouch.GameplayKit.IGKGameModelPlayer" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <summary>The set of legal moves available to the player who's <see cref="M:Monotouch.GameplayKit.IGKGameModelPlayer.GetPlayerID()"/> value is the same as that of <param name="player" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The <see cref="T:Monotouch.GameplayKit.GKMinMaxStrategist"/> may allocate many <see cref="T:Monotouch.GameplayKit.IGKGameModelPlayer"/> objects with identical <see cref="M:Monotouch.GameplayKit.IGKGameModelPlayer.GetPlayerID()"/> values. When comparing <see cref="T:Monotouch.GameplayKit.IGKGameModelPlayer"/> instances, developers should rely on <see cref="M:Monotouch.GameplayKit.GKGameModelPlayer_Extensions.GetPlayerId"/> values, not reference equality.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlayers">
      <MemberSignature Language="C#" Value="public MonoTouch.GameplayKit.IGKGameModelPlayer[] GetPlayers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.GameplayKit.IGKGameModelPlayer[] GetPlayers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("players")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.GameplayKit.IGKGameModelPlayer[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The <see cref="T:Monotouch.GameplayKit.IGKGameModelPlayer" /> objects involved in the game.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScore" apistyle="classic">
      <MemberSignature Language="C#" Value="public int GetScore (MonoTouch.GameplayKit.IGKGameModelPlayer player);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetScore(class MonoTouch.GameplayKit.IGKGameModelPlayer player) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nint GetScore (MonoTouch.GameplayKit.IGKGameModelPlayer player);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetScore(class MonoTouch.GameplayKit.IGKGameModelPlayer player) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scoreForPlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="MonoTouch.GameplayKit.IGKGameModelPlayer" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <summary>The current score of the game for <param name="player" />. Higher values are more desirable.</summary>
        <returns>A value between <see cref="P:Monotouch.GameplayKit.GKGameModel.MinScore"/> and <see cref="P:Monotouch.GameplayKit.GKGameModel.MaxScore"/>.</returns>
        <remarks>
          <para>This method is called by <see cref="M:Monotouch.GameplayKit.GKMinMaxStrategist.GetBestMove"/> for every <see cref="T:Monotouch.GameplayKit.IGKGameModel"/> in the search tree for which neither <see cref="M:Monotouch.GameplayKit.GKGameModel_Extensions.IsWin"/> nor <see cref="M:Monotouch.GameplayKit.GKGameModel_Extensions.IsLoss"/> returned <see langword="true"/>. It represents a non-terminal state in the game.</para>
          <para>For very simple games, in which developers can be certain that the <see cref="T:Monotouch.GameplayKit.GKMinMaxStrategist"/> has a sufficient <see cref="P:Monotouch.GameplayKit.GKMinMaxStrategist.MaxLookAheadDepth"/> to finish the game, developers may simply return 0 from this method. For more complex games, implementing this method is a challenge. The method is called for each non-terminal state that arises from calling <see cref="M:Monotouch.GameplayKit.IGKGameModel.GetGameModelUpdate"/> recursively (conceptually -- the actual implementation in <see cref="T:Monotouch.GameplayKit.GKMinMaxStrategist"/> is iterative and reuses <see cref="T:Monotouch.GameplayKit.IGKGameModel"/> instances). The time efficiency of <see cref="T:Monotouch.GameplayKit.GKMinMaxStrategist.GetBestMove"/> is <c>O(b^m)</c> where <c>b</c> is the number of states returned by <see cref="M:Monotouch.GameplayKit.IGKGameModel.GetGameModelUpdate"/> and <c>m</c> is the number of plies searched (<see cref="P:MonoTouch>GameplayKit.GKMinMaxOpponent.MaxLookAheadDepth"/>).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGameModel">
      <MemberSignature Language="C#" Value="public void SetGameModel (MonoTouch.GameplayKit.IGKGameModel gameModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetGameModel(class MonoTouch.GameplayKit.IGKGameModel gameModel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setGameModel:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gameModel" Type="MonoTouch.GameplayKit.IGKGameModel" />
      </Parameters>
      <Docs>
        <param name="gameModel">To be added.</param>
        <summary>Sets the internal state of the game to <param name="gameModel" />.</summary>
        <remarks>
          <para>This method is called many times during the evaluation of <see cref="M:Monotouch.GameplayKit.GKMinMaxStrategist.GetBestMove"/>, as that method attempts to minimize the number of <see cref="T:Monotouch.GameplayKit.IGKGameModel"/> objects allocated and instead uses this method to "reuse" previously-allocated memory.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
