<Type Name="IMTLIndirectRenderCommand" FullName="Metal.IMTLIndirectRenderCommand">
  <TypeSignature Language="C#" Value="public interface IMTLIndirectRenderCommand : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMTLIndirectRenderCommand implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="MTLIndirectRenderCommand", WrapperType=typeof(Metal.MTLIndirectRenderCommandWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexBuffer:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentBuffer:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DrawPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DrawIndexedPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="Reset", Selector="reset")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the required methods of the protocol for CPU-encoded render commands.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DrawIndexedPrimitives">
      <MemberSignature Language="C#" Value="public void DrawIndexedPrimitives (Metal.MTLPrimitiveType primitiveType, nuint indexCount, Metal.MTLIndexType indexType, Metal.IMTLBuffer indexBuffer, nuint indexBufferOffset, nuint instanceCount, nint baseVertex, nuint baseInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawIndexedPrimitives(valuetype Metal.MTLPrimitiveType primitiveType, valuetype System.nuint indexCount, valuetype Metal.MTLIndexType indexType, class Metal.IMTLBuffer indexBuffer, valuetype System.nuint indexBufferOffset, valuetype System.nuint instanceCount, valuetype System.nint baseVertex, valuetype System.nuint baseInstance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="Metal.MTLPrimitiveType" />
        <Parameter Name="indexCount" Type="System.nuint" />
        <Parameter Name="indexType" Type="Metal.MTLIndexType" />
        <Parameter Name="indexBuffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="indexBufferOffset" Type="System.nuint" />
        <Parameter Name="instanceCount" Type="System.nuint" />
        <Parameter Name="baseVertex" Type="System.nint" />
        <Parameter Name="baseInstance" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexBufferOffset">To be added.</param>
        <param name="instanceCount">To be added.</param>
        <param name="baseVertex">To be added.</param>
        <param name="baseInstance">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPrimitives">
      <MemberSignature Language="C#" Value="public void DrawPrimitives (Metal.MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount, nuint instanceCount, nuint baseInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrimitives(valuetype Metal.MTLPrimitiveType primitiveType, valuetype System.nuint vertexStart, valuetype System.nuint vertexCount, valuetype System.nuint instanceCount, valuetype System.nuint baseInstance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="Metal.MTLPrimitiveType" />
        <Parameter Name="vertexStart" Type="System.nuint" />
        <Parameter Name="vertexCount" Type="System.nuint" />
        <Parameter Name="instanceCount" Type="System.nuint" />
        <Parameter Name="baseInstance" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="vertexStart">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="instanceCount">To be added.</param>
        <param name="baseInstance">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentBuffer">
      <MemberSignature Language="C#" Value="public void SetFragmentBuffer (Metal.IMTLBuffer buffer, nuint offset, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBuffer(class Metal.IMTLBuffer buffer, valuetype System.nuint offset, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentBuffer:offset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexBuffer">
      <MemberSignature Language="C#" Value="public void SetVertexBuffer (Metal.IMTLBuffer buffer, nuint offset, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBuffer(class Metal.IMTLBuffer buffer, valuetype System.nuint offset, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexBuffer:offset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
