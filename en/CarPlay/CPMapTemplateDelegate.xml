<Type Name="CPMapTemplateDelegate" FullName="CarPlay.CPMapTemplateDelegate">
  <TypeSignature Language="C#" Value="public class CPMapTemplateDelegate : Foundation.NSObject, CarPlay.ICPMapTemplateDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CPMapTemplateDelegate extends Foundation.NSObject implements class CarPlay.ICPMapTemplateDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>CarPlay.ICPMapTemplateDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("Xamarin_iOS__CarPlay_CPMapTemplateDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Default implementation of <see cref="T:CarPlay.ICPMapTemplateDelegate" />, providing the delegate object for <see cref="T:CarPlay.CPMapTemplate" /> objects.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPMapTemplateDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CPMapTemplateDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CPMapTemplateDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidBeginPanGesture">
      <MemberSignature Language="C#" Value="public virtual void DidBeginPanGesture (CarPlay.CPMapTemplate mapTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidBeginPanGesture(class CarPlay.CPMapTemplate mapTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplateDidBeginPanGesture:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">The template for the map that is panning.</param>
        <summary>Method that is called when a pan gesture starts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidCancelNavigation">
      <MemberSignature Language="C#" Value="public virtual void DidCancelNavigation (CarPlay.CPMapTemplate mapTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidCancelNavigation(class CarPlay.CPMapTemplate mapTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplateDidCancelNavigation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <summary>The system calls this method after navigation has been cancelled.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDismissNavigationAlert">
      <MemberSignature Language="C#" Value="public virtual void DidDismissNavigationAlert (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPNavigationAlert navigationAlert, CarPlay.CPNavigationAlertDismissalContext dismissalContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDismissNavigationAlert(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPNavigationAlert navigationAlert, valuetype CarPlay.CPNavigationAlertDismissalContext dismissalContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:didDismissNavigationAlert:dismissalContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="navigationAlert" Type="CarPlay.CPNavigationAlert" />
        <Parameter Name="dismissalContext" Type="CarPlay.CPNavigationAlertDismissalContext" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">The template for the map whose navigation alert was canceled.</param>
        <param name="navigationAlert">The alert that was canceled.</param>
        <param name="dismissalContext">The reason the alert was dismissed.</param>
        <summary>The system calls this method after the <paramref name="navigationAlert" /> has been dismissed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDismissPanningInterface">
      <MemberSignature Language="C#" Value="public virtual void DidDismissPanningInterface (CarPlay.CPMapTemplate mapTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDismissPanningInterface(class CarPlay.CPMapTemplate mapTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplateDidDismissPanningInterface:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <summary>The system calls this method after the panning interface has been dismissed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidEndPanGesture">
      <MemberSignature Language="C#" Value="public virtual void DidEndPanGesture (CarPlay.CPMapTemplate mapTemplate, CoreGraphics.CGPoint velocity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidEndPanGesture(class CarPlay.CPMapTemplate mapTemplate, valuetype CoreGraphics.CGPoint velocity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:didEndPanGestureWithVelocity:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="velocity" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">The template for the map whose pan gesture ended.</param>
        <param name="velocity">To be added.</param>
        <summary>Method that is called when a panning interface ends.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidShowNavigationAlert">
      <MemberSignature Language="C#" Value="public virtual void DidShowNavigationAlert (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPNavigationAlert navigationAlert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidShowNavigationAlert(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPNavigationAlert navigationAlert) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:didShowNavigationAlert:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="navigationAlert" Type="CarPlay.CPNavigationAlert" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="navigationAlert">To be added.</param>
        <summary>The system calls this method shortly after beginning the display of a navigation alert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidShowPanningInterface">
      <MemberSignature Language="C#" Value="public virtual void DidShowPanningInterface (CarPlay.CPMapTemplate mapTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidShowPanningInterface(class CarPlay.CPMapTemplate mapTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplateDidShowPanningInterface:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <summary>The system calls this method shortly after beginning display of the panning interface.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdatePanGesture">
      <MemberSignature Language="C#" Value="public virtual void DidUpdatePanGesture (CarPlay.CPMapTemplate mapTemplate, CoreGraphics.CGPoint translation, CoreGraphics.CGPoint velocity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidUpdatePanGesture(class CarPlay.CPMapTemplate mapTemplate, valuetype CoreGraphics.CGPoint translation, valuetype CoreGraphics.CGPoint velocity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:didUpdatePanGestureWithTranslation:velocity:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="delta" Type="CoreGraphics.CGPoint" />
        <Parameter Name="velocity" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">The template for the map whose pan gesture was updated.</param>
        <param name="translation">To be added.</param>
        <param name="velocity">The pan velocity.</param>
        <summary>Method that is called when a pan gesture is updated.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDisplayStyle">
      <MemberSignature Language="C#" Value="public virtual CarPlay.CPManeuverDisplayStyle GetDisplayStyle (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPManeuver maneuver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CarPlay.CPManeuverDisplayStyle GetDisplayStyle(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPManeuver maneuver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:displayStyleForManeuver:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CarPlay.CPManeuverDisplayStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="maneuver" Type="CarPlay.CPManeuver" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="maneuver">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pan">
      <MemberSignature Language="C#" Value="public virtual void Pan (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPPanDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pan(class CarPlay.CPMapTemplate mapTemplate, valuetype CarPlay.CPPanDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:panWithDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="direction" Type="CarPlay.CPPanDirection" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>The system calls this method when the <paramref name="mapTemplate" /> has been panned in the <paramref name="direction" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PanBegan">
      <MemberSignature Language="C#" Value="public virtual void PanBegan (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPPanDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PanBegan(class CarPlay.CPMapTemplate mapTemplate, valuetype CarPlay.CPPanDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:panBeganWithDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="direction" Type="CarPlay.CPPanDirection" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>The system calls this method shortly after panning has begun.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PanEnded">
      <MemberSignature Language="C#" Value="public virtual void PanEnded (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPPanDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PanEnded(class CarPlay.CPMapTemplate mapTemplate, valuetype CarPlay.CPPanDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:panEndedWithDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="direction" Type="CarPlay.CPPanDirection" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>The system calls this method shortly after panning has ended.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedPreview">
      <MemberSignature Language="C#" Value="public virtual void SelectedPreview (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPTrip trip, CarPlay.CPRouteChoice routeChoice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectedPreview(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPTrip trip, class CarPlay.CPRouteChoice routeChoice) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:selectedPreviewForTrip:usingRouteChoice:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="trip" Type="CarPlay.CPTrip" />
        <Parameter Name="routeChoice" Type="CarPlay.CPRouteChoice" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="trip">To be added.</param>
        <param name="routeChoice">To be added.</param>
        <summary>The system calls this method after <paramref name="routeChoice" /> has been made. The developer should create a preview.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowNotificationForManeuver">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowNotificationForManeuver (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPManeuver maneuver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowNotificationForManeuver(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPManeuver maneuver) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:shouldShowNotificationForManeuver:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="maneuver" Type="CarPlay.CPManeuver" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="maneuver">To be added.</param>
        <summary>Developers should override this method to return <see langword="true" /> if the system should show a notification for <paramref name="maneuver" /> even when the app is in the background.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowNotificationForNavigationAlert">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowNotificationForNavigationAlert (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPNavigationAlert navigationAlert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowNotificationForNavigationAlert(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPNavigationAlert navigationAlert) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:shouldShowNotificationForNavigationAlert:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="navigationAlert" Type="CarPlay.CPNavigationAlert" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="navigationAlert">To be added.</param>
        <summary>Developers should override this method to return <see langword="true" /> if the system should show <paramref name="navigationAlert" /> even when the app is in the background.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldUpdateNotificationForManeuver">
      <MemberSignature Language="C#" Value="public virtual bool ShouldUpdateNotificationForManeuver (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPManeuver maneuver, CarPlay.CPTravelEstimates travelEstimates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldUpdateNotificationForManeuver(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPManeuver maneuver, class CarPlay.CPTravelEstimates travelEstimates) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:shouldUpdateNotificationForManeuver:withTravelEstimates:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="maneuver" Type="CarPlay.CPManeuver" />
        <Parameter Name="travelEstimates" Type="CarPlay.CPTravelEstimates" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="maneuver">To be added.</param>
        <param name="travelEstimates">To be added.</param>
        <summary>Developers should override this method to return <see langword="true" /> if the system should update notifications with <paramref name="travelEstimates" /> even when the app is in the background.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartedTrip">
      <MemberSignature Language="C#" Value="public virtual void StartedTrip (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPTrip trip, CarPlay.CPRouteChoice routeChoice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartedTrip(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPTrip trip, class CarPlay.CPRouteChoice routeChoice) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:startedTrip:usingRouteChoice:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="trip" Type="CarPlay.CPTrip" />
        <Parameter Name="routeChoice" Type="CarPlay.CPRouteChoice" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="trip">To be added.</param>
        <param name="routeChoice">To be added.</param>
        <summary>The system calls this method shortly after the trip has started.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDismissNavigationAlert">
      <MemberSignature Language="C#" Value="public virtual void WillDismissNavigationAlert (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPNavigationAlert navigationAlert, CarPlay.CPNavigationAlertDismissalContext dismissalContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDismissNavigationAlert(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPNavigationAlert navigationAlert, valuetype CarPlay.CPNavigationAlertDismissalContext dismissalContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:willDismissNavigationAlert:dismissalContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="navigationAlert" Type="CarPlay.CPNavigationAlert" />
        <Parameter Name="dismissalContext" Type="CarPlay.CPNavigationAlertDismissalContext" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="navigationAlert">To be added.</param>
        <param name="dismissalContext">To be added.</param>
        <summary>The system calls this method before dismissing the <paramref name="DidShowNavigationAlert" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDismissPanningInterface">
      <MemberSignature Language="C#" Value="public virtual void WillDismissPanningInterface (CarPlay.CPMapTemplate mapTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDismissPanningInterface(class CarPlay.CPMapTemplate mapTemplate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplateWillDismissPanningInterface:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <summary>The system calls this method before dismissing the panning interface.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillShowNavigationAlert">
      <MemberSignature Language="C#" Value="public virtual void WillShowNavigationAlert (CarPlay.CPMapTemplate mapTemplate, CarPlay.CPNavigationAlert navigationAlert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillShowNavigationAlert(class CarPlay.CPMapTemplate mapTemplate, class CarPlay.CPNavigationAlert navigationAlert) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapTemplate:willShowNavigationAlert:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapTemplate" Type="CarPlay.CPMapTemplate" />
        <Parameter Name="navigationAlert" Type="CarPlay.CPNavigationAlert" />
      </Parameters>
      <Docs>
        <param name="mapTemplate">To be added.</param>
        <param name="navigationAlert">To be added.</param>
        <summary>The system calls this method shortly before showing the <paramref name="navigationAlert" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
