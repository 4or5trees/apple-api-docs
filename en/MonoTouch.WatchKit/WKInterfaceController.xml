<Type Name="WKInterfaceController" FullName="MonoTouch.WatchKit.WKInterfaceController">
  <TypeSignature Language="C#" Value="public abstract class WKInterfaceController : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WKInterfaceController extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("WKInterfaceController", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Availability(Introduced=ObjCRuntime.Platform.iOS_8_2)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for controller objects in Watch Extension projects.</summary>
    <remarks>
      <para>
        Watch Kit Extensions extend <c>WKInterfaceController</c> to access the Watch App lifecycle. 
      </para>
      <para>When associated with a Watch App storyboard (the most common way in which a <see cref="T:WatchKit.WKInterfaceController"/> is instantiated), the <see cref="C:WatchKit.WKInterfaceController.ctor(IntPtr)"/> constructor is used. Application developers should use this and the <see cref="M:WatchKit.WKInterfaceController.Awake"/> method to do the bulk of their initialization work.
      </para>
      <para>
        Shortly before the Watch App's user interface appears to the user, the system calls the <see cref="M:WatchKit.WKInterfaceController.WillActivate"/> method. This method is also 
        called if the app has been deactivated but not terminated. Developers should use this method for last-minute initialization and to, for instance, begin animations or 
        other interface-related processes.
      </para>
      <para>
        After the Watch App has been dismissed by the user, the system calls the <see cref="M:WatchKit.WKInterfaceController.DidDeactivate"/> method. After this method exits, 
        the Watch Extension may perform no further processing. Pending asynchronous methods will not run. Watch Extension's may not use background processing modes. App 
        devs who need to process data while the Watch Extension is deactivated must use the parent app to do so, communicating, as necessary, by using the <see cref="M:WatchKit.WKInterfaceController.OpenParentApplication"/> and <see cref="M:UIKit.UIApplicationDelegate.HandleWatchKitExtensionRequest"/> methods.
      </para>
      <para><img href="WatchKit.WKInterfaceControllerLifecycle.png"/></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceController ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public virtual void AddMenuItem (string imageName, string title, ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMenuItem(string imageName, string title, class ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addMenuItemWithImageNamed:title:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageName" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="imageName">Name of the image resource in the Watch App bundle.</param>
        <param name="title">Displayed under the image.</param>
        <param name="action">Name of <c>ActionAttribute</c>-tagged method called on selection.</param>
        <summary>Adds a menu item with a predefined image to the context menu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public virtual void AddMenuItem (UIKit.UIImage image, string title, ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMenuItem(class UIKit.UIImage image, string title, class ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addMenuItemWithImage:title:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="image">The image to be used.</param>
        <param name="title">Displayed under the image.</param>
        <param name="action">>Name of <c>ActionAttribute</c>-tagged method called on selection.</param>
        <summary>Adds a menu item with a specified <see cref="T:MonoTouch.UIKit.UIImage"/> to the context menu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public void AddMenuItem (UIKit.UIImage image, string title, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMenuItem(class UIKit.UIImage image, string title, class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public virtual void AddMenuItem (WatchKit.WKMenuItemIcon itemIcon, string title, ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMenuItem(valuetype WatchKit.WKMenuItemIcon itemIcon, string title, class ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addMenuItemWithItemIcon:title:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIcon" Type="WatchKit.WKMenuItemIcon" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="itemIcon">Predefined icon.</param>
        <param name="title">Displayed under the icon.</param>
        <param name="action">>Name of <c>ActionAttribute</c>-tagged method called on selection.</param>
        <summary>Adds a menu item with a predefined icon to the context menu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public void AddMenuItem (WatchKit.WKMenuItemIcon itemIcon, string title, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMenuItem(valuetype WatchKit.WKMenuItemIcon itemIcon, string title, class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIcon" Type="WatchKit.WKMenuItemIcon" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="itemIcon">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Awake">
      <MemberSignature Language="C#" Value="public virtual void Awake (Foundation.NSObject context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Awake(class Foundation.NSObject context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("awakeWithContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="context">Arbitrary data (set by presenting <see cref="T:WatchKit.WKInterfaceController"/>). May be <see langword="null"/>.</param>
        <summary>Main initialization method.</summary>
        <remarks>
          <para>The <paramref name="context"/> may contain data from a 
            previous <see cref="T:WatchKit.WKInterfaceController"/>, and is passed by the <see cref="M:WatchKit.WKInterfaceController.PresentController"/> method.</para>
          <para>Most initialization should be done in this method rather than <see cref="M:WKInterfaceController.WillActivate"/>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BecomeCurrentPage">
      <MemberSignature Language="C#" Value="public virtual void BecomeCurrentPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BecomeCurrentPage() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("becomeCurrentPage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In a page-based UI, makes <c>this</c> the active controller.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllMenuItems">
      <MemberSignature Language="C#" Value="public virtual void ClearAllMenuItems ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearAllMenuItems() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("clearAllMenuItems")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes programmatically-added items from the context menu.</summary>
        <remarks>
          <para>This method does not remove menu items specified in the Watch App's storyboard. It only removes items added with <see cref="M:WatchKit.WKInterfaceController.AddMenuItem"/> method calls.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentFrame">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ContentFrame { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect ContentFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentFrame")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The rectangle in which content is displayed. Measured in points.</summary>
        <value> Measured in points.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDeactivate">
      <MemberSignature Language="C#" Value="public virtual void DidDeactivate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDeactivate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("didDeactivate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after the Watch App has been dismissed by the user.</summary>
        <remarks>
          <para>After this method has completed, the Watch Extension will be deactivated and potentially terminated. No pending asynchronous functions will execute.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectRow">
      <MemberSignature Language="C#" Value="public virtual void DidSelectRow (WatchKit.WKInterfaceTable table, nint rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectRow(class WatchKit.WKInterfaceTable table, valuetype System.nint rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("table:didSelectRowAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="WatchKit.WKInterfaceTable" />
        <Parameter Name="rowIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="table">The table in which the selection occurred.</param>
        <param name="rowIndex">The index of the selected row.</param>
        <summary>Called when the user has selected a row in the <paramref name="table"/>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissController">
      <MemberSignature Language="C#" Value="public virtual void DismissController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dismissController")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dismisses a modally-presented <see cref="T:WatchKit.WKInterfaceController"/>.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>

        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissTextInputController">
      <MemberSignature Language="C#" Value="public virtual void DismissTextInputController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissTextInputController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dismissTextInputController")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels text input and dismisses the text input controller.</summary>
        <remarks>
          <para>Calling this method cancels text input and prevents the completion handler specified in <see cref="M:WatchKit.WKInterfaceController.PresentTextInputController"/> from running.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDomain">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ErrorDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ErrorDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("WatchKitErrorDomain", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the Watch Kit error domain.</summary>
        <value>To be added.</value>
        <remarks>
          <para>See <see cref="P:MonoTouch.Foundation.NSErrorException.Domain"/>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextForSegue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetContextForSegue (string segueIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetContextForSegue(string segueIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextForSegueWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">The segue that is about to occur.</param>
        <summary>In response to a button tap, returns the context to be passed to the next <see cref="T:WatchKit.WKInterfaceController"/> object's <see cref="M:WatchKit.WKInterfaceController.Awake"/> method.</summary>
        <returns>Context for the upcoming <see cref="T:WatchKit.WKInterfaceController"/> object's <see cref="M:WatchKit.WKInterfaceController.Awake"/> method.</returns>
        <remarks>
          <para>This method is called on the Watch Extension's main thread.</para>
          </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextForSegue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetContextForSegue (string segueIdentifier, WatchKit.WKInterfaceTable table, nint rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetContextForSegue(string segueIdentifier, class WatchKit.WKInterfaceTable table, valuetype System.nint rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextForSegueWithIdentifier:inTable:rowIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
        <Parameter Name="table" Type="WatchKit.WKInterfaceTable" />
        <Parameter Name="rowIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">The segue that is about to occur.</param>
        <param name="table">The table in which the selection occurred.</param>
        <param name="rowIndex">The row tapped.</param>
        <summary>In response to a row selection, returns the context to be passed to the next <see cref="T:WatchKit.WKInterfaceController"/> object's <see cref="M:WatchKit.WKInterfaceController.Awake"/> method.</summary>
        <returns>Context for the upcoming <see cref="T:WatchKit.WKInterfaceController"/> object's <see cref="M:WatchKit.WKInterfaceController.Awake"/> method.</returns>
        <remarks>
          <para>This method is called on the Watch Extension's main thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextsForSegue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject[] GetContextsForSegue (string segueIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject[] GetContextsForSegue(string segueIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextsForSegueWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">The segue that is about to occur.</param>
        <summary>In response to a button tap leading to a page-based UI, returns the context objects to be passed to the <see cref="T:WatchKit.WKInterfaceController"/> objects' <see cref="M:WatchKit.WKInterfaceController.Awake"/> methods.</summary>
        <returns>Contexts for the <see cref="M:WatchKit.WKInterfaceController.Awake"/> methods of the upcoming page-based UI.</returns>
        <remarks>
          <para>The size of the returned array must equal the number of pages in the target page-based UI.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextsForSegue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject[] GetContextsForSegue (string segueIdentifier, WatchKit.WKInterfaceTable table, nint rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject[] GetContextsForSegue(string segueIdentifier, class WatchKit.WKInterfaceTable table, valuetype System.nint rowIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextsForSegueWithIdentifier:inTable:rowIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
        <Parameter Name="table" Type="WatchKit.WKInterfaceTable" />
        <Parameter Name="rowIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">The segue that is about to occur.</param>
        <param name="table">The table in which the selection occurred.</param>
        <param name="rowIndex">The row tapped.</param>
        <summary>In response to a table-row tap leading to a page-based UI, returns the context objects to be passed to the <see cref="T:WatchKit.WKInterfaceController"/> objects' <see cref="M:WatchKit.WKInterfaceController.Awake"/> methods.</summary>
        <returns>Contexts for the <see cref="M:WatchKit.WKInterfaceController.Awake"/> methods of the upcoming page-based UI.</returns>
        <remarks>
                 <para>The size of the returned array must equal the number of pages in the target page-based UI.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleLocalNotificationAction">
      <MemberSignature Language="C#" Value="public virtual void HandleLocalNotificationAction (string identifier, UIKit.UILocalNotification localNotification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleLocalNotificationAction(string identifier, class UIKit.UILocalNotification localNotification) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("handleActionWithIdentifier:forLocalNotification:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="localNotification" Type="UIKit.UILocalNotification" />
      </Parameters>
      <Docs>
        <param name="identifier">The action chosen by the user, or an empty string if the user launched the app without using an action button.</param>
        <param name="localNotification">The notification.</param>
        <summary>Called on the Watch App's initial <see cref="T:WatchKit.WKInterfaceController"/> when the user reacts to a local notification.</summary>
        <remarks>
          <para>This method is called on the <see cref="T:WatchKit.WKInterfaceController"/> that is the initial one in the Watch App storyboard, not the <see cref="T:WatchKit.WKInterfaceController"/> that displays notifications.</para>
          <para>This method is called on the Watch Extension's main thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleRemoteNotificationAction">
      <MemberSignature Language="C#" Value="public virtual void HandleRemoteNotificationAction (string identifier, Foundation.NSDictionary remoteNotification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleRemoteNotificationAction(string identifier, class Foundation.NSDictionary remoteNotification) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("handleActionWithIdentifier:forRemoteNotification:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="remoteNotification" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="identifier">The action chosen by the user, or an empty string if the user launched the app without using an action button.</param>
        <param name="remoteNotification">The notification.</param>
        <summary>Called on the Watch App's initial <see cref="T:WatchKit.WKInterfaceController"/> when the user reacts to a remote notification.</summary>
        <remarks>
          <para>This method is called on the <see cref="T:WatchKit.WKInterfaceController"/> that is the initial one in the Watch App storyboard, not the <see cref="T:WatchKit.WKInterfaceController"/> that displays notifications.</para>
          <para>This method is called on the Watch Extension's main thread.</para>

        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleUserActivity">
      <MemberSignature Language="C#" Value="public virtual void HandleUserActivity (Foundation.NSDictionary userActivity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleUserActivity(class Foundation.NSDictionary userActivity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("handleUserActivity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userActivity" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="userActivity">A dictionary containing information about the user activity. Set by a Glance controller calling <see cref="M:WatchKit.WKInterfaceController.UpdateUserActivity"/>.</param>
        <summary>Indicates that the Watch App was launched as a result of a Handoff action.</summary>
        <remarks>
          <para>If needed, this method should be overridden in the Watch App's initial <see cref="T:WatchKit.WKInterfaceController"/>. If the Watch App uses a page-based interface, this method will be called on each <see cref="T:WatchKit.WKInterfaceController"/> in the initial interface.</para>
          <para>Application developers who override this method should not call the base implementation.</para>
        </remarks>
      </Docs>
    </Member>
<Member MemberName="InvalidateUserActivity">
      <MemberSignature Language="C#" Value="public virtual void InvalidateUserActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateUserActivity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateUserActivity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenParentApplication">
      <MemberSignature Language="C#" Value="public static bool OpenParentApplication (Foundation.NSDictionary userInfo, Action&lt;Foundation.NSDictionary,Foundation.NSError&gt; reply);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool OpenParentApplication(class Foundation.NSDictionary userInfo, class System.Action`2&lt;class Foundation.NSDictionary, class Foundation.NSError&gt; reply) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("openParentApplication:reply:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userInfo" Type="Foundation.NSDictionary" />
        <Parameter Name="reply" Type="System.Action&lt;Foundation.NSDictionary,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V41))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="userInfo">Data passed up to the parent app.</param>
        <param name="reply">Callback passed data from the parent app.</param>
        <summary>Opens the Watch Extension's Parent app, passing <paramref name="userInfo"/> and receiving data back in the <paramref name="reply"/> callback.</summary>
        <returns><see langword="true"/> if the Parent app was opened successfully.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopController">
      <MemberSignature Language="C#" Value="public virtual void PopController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("popController")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In a navigation interface, pops the current <see cref="T:WatchKit.WKInterfaceController"/>.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopToRootController">
      <MemberSignature Language="C#" Value="public virtual void PopToRootController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopToRootController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("popToRootController")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In a navigation interface, pops all <see cref="T:WatchKit.WKInterfaceController"/> except the root.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public virtual void PresentController (string name, Foundation.NSObject context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentController(string name, class Foundation.NSObject context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("presentControllerWithName:context:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="name">In the Storyboard, the value of the Identifier for the <see cref="T:WatchKit.WKInterfaceController"/> to be presented.</param>
        <param name="context">Information for the <see cref="T:WatchKit.WKInterfaceController"/> to be presented. May be <see langword="null"/>.</param>
        <summary>Modally presents a <see cref="T:WatchKit.WKInterfaceController"/>.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public void PresentController (string name, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PresentController(string name, string context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">In the Storyboard, the value of the Identifier for the <see cref="T:WatchKit.WKInterfaceController"/> to be presented.</param>
        <param name="context">Information for the <see cref="T:WatchKit.WKInterfaceController"/> to be presented. May be <see langword="null"/>.</param>
        <summary>Modally presents a <see cref="T:WatchKit.WKInterfaceController"/>.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public virtual void PresentController (string[] names, Foundation.NSObject[] contexts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentController(string[] names, class Foundation.NSObject[] contexts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("presentControllerWithNames:contexts:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="contexts" Type="Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="names">In the Storyboard, the values of the Identifier for the <see cref="T:WatchKit.WKInterfaceController"/> objects to be presented.</param>
        <param name="contexts">Information for the <see cref="T:WatchKit.WKInterfaceController"/>s to be presented. May be <see langword="null"/>.</param>
        <summary>Modally presents a page-based UI with the specified <see cref="T:WatchKit.WKInterfaceController"/>s.</summary>
        <remarks>
          <para>The Title of the presented page-based UI will be "Cancel" unless the app dev changes it with <see cref="M:WatchKit.WKInterfaceController.SetTitle"/>.</para>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public void PresentController (string[] names, string[] contexts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PresentController(string[] names, string[] contexts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="contexts" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="names">In the Storyboard, the values of the Identifier for the <see cref="T:WatchKit.WKInterfaceController"/> objects to be presented.</param>
        <param name="contexts">Information for the <see cref="T:WatchKit.WKInterfaceController"/>s to be presented. May be <see langword="null"/>.</param>
        <summary>Modally presents a page-based UI with the specified <see cref="T:WatchKit.WKInterfaceController"/>s.</summary>
        <remarks>
          <para>The Title of the presented page-based UI will be "Cancel" unless the app dev changes it with <see cref="M:WatchKit.WKInterfaceController.SetTitle"/>.</para>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>

      </Docs>
    </Member>
    <Member MemberName="PresentTextInputController">
      <MemberSignature Language="C#" Value="public virtual void PresentTextInputController (string[] suggestions, WatchKit.WKTextInputMode inputMode, Action&lt;Foundation.NSArray&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentTextInputController(string[] suggestions, valuetype WatchKit.WKTextInputMode inputMode, class System.Action`1&lt;class Foundation.NSArray&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("presentTextInputControllerWithSuggestions:allowedInputMode:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suggestions" Type="System.String[]" />
        <Parameter Name="inputMode" Type="WatchKit.WKTextInputMode" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSArray&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V45))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="suggestions">Suggested phrases for input.</param>
        <param name="inputMode">Value from <see cref="T:WatchKit.WKTextInputMode"/>.</param>
        <param name="completion">Executed after text input completes.</param>
        <summary>Asynchronously presents the watch's text input controller.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushController">
      <MemberSignature Language="C#" Value="public virtual void PushController (string name, Foundation.NSObject context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushController(string name, class Foundation.NSObject context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pushControllerWithName:context:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="name">In the Storyboard, the value of the Identifier for the <see cref="T:WatchKit.WKInterfaceController"/> to be displayed.</param>
        <param name="context">Information for the <see cref="T:WatchKit.WKInterfaceController"/> being displayed. May be <see langword="null"/>.</param>
        <summary>In a navigation interface, initializes and displays a new <see cref="T:WatchKit.WKInterfaceController"/>.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread"/> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread"/>)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadRootControllers">
      <MemberSignature Language="C#" Value="public static void ReloadRootControllers (string[] names, Foundation.NSObject[] contexts);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReloadRootControllers(string[] names, class Foundation.NSObject[] contexts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reloadRootControllersWithNames:contexts:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="contexts" Type="Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="names">In the Storyboard, the Identifiers of the <see cref="T:WatchKit.WKInterfaceController"/>s.</param>
        <param name="contexts">Information for the <see cref="T:WatchKit.WKInterfaceController"/>s being loaded. May be <see langword="null"/>.</param>
        <summary>In a page-based UI, reloads the set of <see cref="T:WatchKit.WKInterfaceController"/>s displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(string title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTitle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">The new title.</param>
        <summary>Sets the title for the interface.</summary>
        <remarks>
          <para>If the Extension contains a <c>Localizable.string</c> file, the <paramref name="title"/> parameter will be used as the key to lookup the value displayed.</para>  
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUserActivity">
      <MemberSignature Language="C#" Value="public virtual void UpdateUserActivity (string type, Foundation.NSDictionary userInfo, Foundation.NSUrl webpageURL);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateUserActivity(string type, class Foundation.NSDictionary userInfo, class Foundation.NSUrl webpageURL) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("updateUserActivity:userInfo:webpageURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="userInfo" Type="Foundation.NSDictionary" />
        <Parameter Name="webpageURL" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="userInfo">To be added.</param>
        <param name="webpageURL">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillActivate">
      <MemberSignature Language="C#" Value="public virtual void WillActivate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillActivate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("willActivate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called shortly before the <see cref="T:WatchKit.WKInterfaceController"/> appears to the user.</summary>
        <remarks>
          <para>This method is called shortly before the <see cref="T:WatchKit.WKInterfaceController"/> appears and when the <see cref="T:WatchKit.WKInterfaceController"/> is re-activated without having been terminated.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
