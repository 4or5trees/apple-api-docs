<Type Name="WKInterfaceImage" FullName="MonoTouch.WatchKit.WKInterfaceImage">
  <TypeSignature Language="C#" Value="public class WKInterfaceImage : WatchKit.WKInterfaceObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WKInterfaceImage extends WatchKit.WKInterfaceObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>WatchKit.WKInterfaceObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("WKInterfaceImage", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Availability(Introduced=ObjCRuntime.Platform.iOS_8_2)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A watch control that displays an image.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceImage (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (Foundation.NSData imageData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(class Foundation.NSData imageData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setImageData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="imageData">Raw image data or an archived <see cref="T:MonoTouch.UIKit.UIImage"/>.</param>
        <summary>Sets the image to the specified <paramref name="imageData"/> or shows nothing if <see langword="null"/> is passed.</summary>
        <remarks>
          <para>If the <paramref name="imageData"/> contains multiple images, the resulting image will be animated.</para>
          <para>The size of the <see cref="T:MonoTouch.WatchKit.WKInterfaceImage"/> is determined by the <paramref name="imageData"/>. If the result is larger than the screen, the image will be clipped.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (string imageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(string imageName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setImageNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageName">A file in the Watch bundle or on the device-side cache.</param>
        <summary>Sets the image to the specified <paramref name="imageName"/> file in the Watch bundle or device-side cache.</summary>
        <remarks>
          <para>The Watch bundle is searched first for the corresponding file name (which should include the file extension). If the bundle does not contain the image, the device-side cache is then searched.</para>
          <para>If the file contains multiple images, the resulting image will be animated.</para>
          <para>The size of the <see cref="T:MonoTouch.WatchKit.WKInterfaceImage"/> is determined by the file. If the result is larger than the screen, the image will be clipped.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (UIKit.UIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(class UIKit.UIImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
      </Parameters>
      <Docs>
        <param name="image">The image to display.</param>
        <summary>Sets the displayed image to the specified <paramref name="image"/>.</summary>
        <remarks>
          <para>If the <paramref name="image"/> contains multiple images, the resulting image will be animated.</para>
          <para>The size of the <see cref="T:MonoTouch.WatchKit.WKInterfaceImage"/> is determined by the <paramref name="image"/>. If the result is larger than the screen, the image will be clipped.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTintColor">
      <MemberSignature Language="C#" Value="public virtual void SetTintColor (UIKit.UIColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTintColor(class UIKit.UIColor color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTintColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="UIKit.UIColor" />
      </Parameters>
      <Docs>
        <param name="color">The color to be applied for a template image.</param>
        <summary>Specified the color to be used with a template image.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnimating">
      <MemberSignature Language="C#" Value="public virtual void StartAnimating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAnimating() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startAnimating")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins animating an image sequence.</summary>
        <remarks>
          <para>The animation begins with the first image in the data. If the data contains only a single image, this method does nothing.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnimating">
      <MemberSignature Language="C#" Value="public virtual void StartAnimating (Foundation.NSRange imageRange, double duration, nint repeatCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAnimating(valuetype Foundation.NSRange imageRange, float64 duration, valuetype System.nint repeatCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startAnimatingWithImagesInRange:duration:repeatCount:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageRange" Type="Foundation.NSRange" />
        <Parameter Name="duration" Type="System.Double" />
        <Parameter Name="repeatCount" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="imageRange">The 0-based range of images to animate.</param>
        <param name="duration">The time, in seconds, of a single loop of the animation.</param>
        <param name="repeatCount">The number of times to repeat the animation. If 0, the animation will repeat indefinitely.</param>
        <summary>Animates the image sequence with a loop of the specified <paramref name="duration"/>.</summary>
        <remarks>
          <para>The animation begins with the first image in the <paramref name="imageRange"/>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAnimating">
      <MemberSignature Language="C#" Value="public virtual void StopAnimating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAnimating() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("stopAnimating")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops any currently running animations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
