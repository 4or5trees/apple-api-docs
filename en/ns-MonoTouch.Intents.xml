<Namespace Name="MonoTouch.Intents">
  <Docs>
    <summary>The Intents namespace supports Siri-related app extensions.</summary>
    <remarks>
      <para>Introduced in iOS 10, the Intents namespace (also referred to as Siri Kit) allows application developers to extend their applications to respond to Siri– or Maps– initiated user requests within predefined domains.</para>
      <para>Intents app extensions are extension projects that extend <see cref="T:MonoTouch.Intents.INExtension"/> and implement one or more other domain-specific interfaces (e.g., a message-handling extension might implement <see cref="T:MonoTouch.Intents.IINSendMessageIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSearchForMessagesIntentHandling"/>, and <see cref="T:MonoTouch.Intents.IINSetMessageAttributeIntentHandling"/>). If the extension requires a custom interface, the developer should use the classes in <see cref="N:MonoTouch.IntentsUI"/> to create a user-experience presented by Siri or the Maps subsystem. </para>
      <para>"Intents" are user requests recognized by Siri or Maps that may be handled by custom extensions. Only certain problem domains are supported:</para>
      <list type="table">
      <listheader> 
        <term>Domain</term>
        <description>Interfaces</description>
      </listheader>
      <item>
        <term>Voice over IP calls</term>
        <description><see cref="T:MonoTouch.Intents.IINCallsDomainHandling"/>, <see cref="T:MonoTouch.Intents.IINSearchCallHistoryIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINStartAudioCallIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINStartVideoCallIntentHandling"/></description>
      </item>
      <item>
        <term>Messaging</term>
        <description><see cref="T:MonoTouch.Intents.MessagesDomainHandling"/>, <see cref="T:MonoTouch.Intents.IINSearchForMessagesIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSendMessageIntentHandling"/>, , <see cref="T:MonoTouch.Intents.SetMessageAttributeIntentHandling"/></description>
        </item>
      <item>
        <term>Payments</term>
        <description><see cref="T:MonoTouch.Intents.IINPaymentsDomainHandling"/>, <see cref="T:MonoTouch.Intents.IINRequestPaymentIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSendPaymentIntentHandling"/></description>
        </item>
      <item>
        <term>Photos</term>
        <description><see cref="T:MonoTouch.Intents.IINPhotosDomainHandling"/>, <see cref="T:MonoTouch.Intents.IINSearchForPhotosIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINStartPhotoPlaybackIntentHandling"/></description>
        </item>
      <item>
        <term>Workouts</term>
        <description><see cref="T:MonoTouch.Intents.IINCancelWorkoutIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINEndWorkoutIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINPauseWorkoutIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINResumeWorkoutIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINStartWorkoutIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINWorkoutsDomainHandling"/></description>
        </item>
      <item>
        <term>Booking a ride</term>
        <description><see cref="T:MonoTouch.Intents.IINGetRideStatusIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINGetRideStatusIntentResponseObserver"/>, <see cref="T:MonoTouch.Intents.IINListRideOptionsIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINRequestRideIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINRidesharingDomainHandling"/></description>
        </item>
      <item>
        <term>CarPlay (restricted to automotive vendors)</term>
        <description><see cref="T:MonoTouch.Intents.IINCarPlayDomainHandling"/>, <see cref="T:MonoTouch.Intents.IINRadioDomainHandling"/>, <see cref="T:MonoTouch.Intents.IINSaveProfileInCarIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSetAudioSourceInCarIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSetClimateSettingsInCarIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSetDefrosterSettingsInCarIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSetProfileInCarIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSetRadioStationIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINSetSeatSettingsInCarIntentHandling"/></description>
        </item>
         <item>
        <term>Restaurant reservations (restricted to Apple partners)</term>
        <description><see cref="T:MonoTouch.Intents.IINBookRestaurantReservationIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINGetAvailableRestaurantReservationBookingDefaultsIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINGetAvailableRestaurantReservationBookingsIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINGetRestaurantGuestIntentHandling"/>, <see cref="T:MonoTouch.Intents.IINGetUserCurrentRestaurantReservationBookingsIntentHandling"/></description>
      </item>
      </list>
      <para>Interfaces named <c>IIN{IntentName}IntentHandling</c> define methods typically named <c>Handle{IntentName}</c> that receive a subclass of <see cref="T:MonoTouch.Intents.INIntent"/> and a completion handler that the developer should call before exiting the function:</para>
<example>
        <code lang="C#"><![CDATA[
// Handle the "send message" intent
public void HandleSendMessage (INSendMessageIntent intent, Action<INSendMessageIntentResponse> completion)
{
    // Implement your application logic to send a message here.

    var userActivity = new NSUserActivity (nameof (INSendMessageIntent));
    var response = new INSendMessageIntentResponse (INSendMessageIntentResponseCode.Success, userActivity);
    completion (response);
}    ]]></code>
      </example>      
      <para>Any application that interacts with Siri must fulfill certain privacy requirements:</para>
      <list type="bullet">
        <item><term>A provisioning profile configured for Siri Kit (requires explicit bundle identifier)</term></item>
        <item><term>A bundle identifier that matches the provisioning profile</term></item>
        <item><term>A boolean entry in Entitlements.plist with key <c>com.apple.developer.siri</c> (XML: <c><![CDATA[<key>com.apple.developer.siri</key>
	<true/>]]></c>)</term></item>
      <item><term>A string entry in Info.plist for "Privacy - Siri Usage Description" (XML: <c><![CDATA[<key>NSSiriUsageDescription</key>
	<string>Justification for Siri</string>]]></c>)</term></item>
      </list>
      <para>Additionally, within the extension project's info.plist, the developer must add a <c>dict</c> called <c>NSExtension</c> that contains:</para>
      <list type="table">
        <listheader> 
        <term>Key</term>
        <description>Value</description>
        </listheader>
        <item><term>NSExtensionPointIdentifier</term><description><c>com.apple.intents-service</c></description></item>
        <item><term>NSExtensionPrincipalClass</term><description>The value of the <see cref="T:MonoTouch.Foundation.RegisterAttribute"/> of the extension's <see cref="T:MonoTouch.Intents.INExtension"/>.</description></item>
        <item><term>NSExtensionAttributes</term><description>A <c>dict</c> that contains the key <c>IntentsSupported</c> that contains an array of strings whose values contain the names of the Intents it may handle.</description></item>
      </list>
      <para>For instance, an extension that works with messages, whose main class is defined as:</para>
      <example>
    <code lang="C#"><![CDATA[
[Register ("MyIntentHandler")]
public class MyIntentHandler : INExtension, IINSendMessageIntentHandling, IINSearchForMessagesIntentHandling, IINSetMessageAttributeIntentHandling
{ 
//...etc... 
}
    ]]></code>
      </example>
      <para>Might have the following in its Info.plist</para>
      <example>
    <code lang="XML"><![CDATA[
	<key>NSExtension</key>
	<dict>
		<key>NSExtensionAttributes</key>
		<dict>
			<key>IntentsRestrictedWhileLocked</key>
			<array/>
			<key>IntentsSupported</key>
			<array>
				<string>INSendMessageIntent</string>
				<string>INSearchForMessagesIntent</string>
				<string>INSetMessageAttributeIntent</string>
			</array>
		</dict>
		<key>NSExtensionPointIdentifier</key>
		<string>com.apple.intents-service</string>
		<key>NSExtensionPrincipalClass</key>
		<string>MyIntentHandler</string>
	</dict>

    ]]></code>
      </example>
      <para>If the Extension project requires more than the standard entitlements and thereby require an explicit App ID, the extension project must have its own provisioning profile with the needed entitlements. For instance, an extension in the Workout domain will probably require a HealthKit entitlement, which would require separate provisioning profiles for the phone app and for the extension. (If the workout solution also involves a WatchOS extension that tracks the workout, the Watch extension and Watch app also need their own separate provisioning profiles with their explicit app ids.) </para>
    </remarks>
  </Docs>
</Namespace>
