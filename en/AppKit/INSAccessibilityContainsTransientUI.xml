<Type Name="INSAccessibilityContainsTransientUI" FullName="AppKit.INSAccessibilityContainsTransientUI">
  <TypeSignature Language="C#" Value="public interface INSAccessibilityContainsTransientUI : AppKit.INSAccessibilityElementProtocol, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INSAccessibilityContainsTransientUI implements class AppKit.INSAccessibilityElementProtocol, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AppKit.INSAccessibilityContainsTransientUI" />
  <TypeSignature Language="F#" Value="type INSAccessibilityContainsTransientUI = interface&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSAccessibilityElementProtocol" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.Mac</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>AppKit.INSAccessibilityElementProtocol</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="NSAccessibilityContainsTransientUI", WrapperType=typeof(AppKit.NSAccessibilityContainsTransientUIWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AccessibilityPerformShowAlternateUI", ReturnType=typeof(System.Boolean), Selector="accessibilityPerformShowAlternateUI")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AccessibilityPerformShowDefaultUI", ReturnType=typeof(System.Boolean), Selector="accessibilityPerformShowDefaultUI")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isAccessibilityAlternateUIVisible", IsProperty=true, IsRequired=true, IsStatic=false, Name="IsAccessibilityAlternateUIVisible", PropertyType=typeof(System.Boolean), Selector="isAccessibilityAlternateUIVisible")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessibilityPerformShowAlternateUI">
      <MemberSignature Language="C#" Value="public bool AccessibilityPerformShowAlternateUI ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AccessibilityPerformShowAlternateUI() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSAccessibilityContainsTransientUI.AccessibilityPerformShowAlternateUI" />
      <MemberSignature Language="F#" Value="abstract member AccessibilityPerformShowAlternateUI : unit -&gt; bool" Usage="iNSAccessibilityContainsTransientUI.AccessibilityPerformShowAlternateUI " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("accessibilityPerformShowAlternateUI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityPerformShowDefaultUI">
      <MemberSignature Language="C#" Value="public bool AccessibilityPerformShowDefaultUI ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AccessibilityPerformShowDefaultUI() cil managed" />
      <MemberSignature Language="DocId" Value="M:AppKit.INSAccessibilityContainsTransientUI.AccessibilityPerformShowDefaultUI" />
      <MemberSignature Language="F#" Value="abstract member AccessibilityPerformShowDefaultUI : unit -&gt; bool" Usage="iNSAccessibilityContainsTransientUI.AccessibilityPerformShowDefaultUI " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("accessibilityPerformShowDefaultUI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAccessibilityAlternateUIVisible">
      <MemberSignature Language="C#" Value="public bool IsAccessibilityAlternateUIVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessibilityAlternateUIVisible" />
      <MemberSignature Language="DocId" Value="P:AppKit.INSAccessibilityContainsTransientUI.IsAccessibilityAlternateUIVisible" />
      <MemberSignature Language="F#" Value="member this.IsAccessibilityAlternateUIVisible : bool" Usage="AppKit.INSAccessibilityContainsTransientUI.IsAccessibilityAlternateUIVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.Mac</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isAccessibilityAlternateUIVisible")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
