<Type Name="CSSearchQuery" FullName="MonoTouch.CoreSpotlight.CSSearchQuery">
  <TypeSignature Language="C#" Value="public class CSSearchQuery : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CSSearchQuery extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CSSearchQuery", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Searches data that the developer has previously indexed with the Core Spotlight API.</summary>
    <remarks><para>Application developers search indexed app content by creating a <see cref="T:MonoTouch.CoreSpotlight.CSSearchQuery" /> with a query string that searches for the specified data. Developers then set neither, one, or both of the <see cref="P:MonoTouch.CoreSpotlight.CSSearchQuery.FoundItemsHandler" /> and <see cref="P:MonoTouch.CoreSpotlight.CSSearchQuery.CompletionHandler" /> properties to, and then call <see cref="M:MonoTouch.CoreSpotlight.CSSearchQuery.Start" /> to begin receiving items that are matched by the query string.</para>
    <para>Core Spotlight search query strings have an easy-to-understand syntax for developers who are familiar with C#:
        <list type="bullet">
            <item><term>The C# logical operators, <c>==</c>, <c>!=</c>, <c>&lt;</c>, <c>&gt;</c>, <c>&lt;=</c>, and <c>&gt;=</c>, are supported.</term></item>
            <item><term>Embedded single quotes match an entire string, while embedded double quotes match quoted instances within larger strings. Developers should, of course, note that embedded quotes must be escaped with a backslash.</term></item>
        <item><term>An asterisk, <c>*</c>, does wildcard matching.</term></item>
        <item><term><c>c</c>, <c>d</c>, <c>w</c>, and <c>t</c>, perform case-insensitive, diacritic-insensitive, word-based, and token-based matching, respectively.</term></item>
        <item><term>Developers can use the logical AND (<c>&amp;&amp;</c>) and logical OR (<c>||</c>) operators to build combined queries.</term></item>
        <item><term>DateTime methods can be used on the special <c>$time</c> variable and its members to match time intervals.</term></item>
        </list> </para>
        <para>For more information, see Apple's documentation for the <format type="text/html"><a href="https://developer.apple.com/reference/CoreSpotlight/CSSearchQuery">CSSearchQuery object</a></format>.</para>
</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CSSearchQuery (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CSSearchQuery (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected CSSearchQuery (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CSSearchQuery (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected CSSearchQuery (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CSSearchQuery (string queryString, string[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string queryString, string[] attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithQueryString:attributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="attributes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="queryString">To be added.</param>
        <param name="attributes">
          <para>A list of strings from <see cref="T:MonoTouch.CoreSpotlight.CSSearchableItemAttributeSet" /> to match.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new search query object for the specified query string and attributes.</summary>
        <remarks><para>For more information on the query string format, see Apple's documentation for the <format type="text/html"><a href="https://developer.apple.com/reference/CoreSpotlight/CSSearchQuery">CSSearchQuery object</a></format>.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cancel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the current search and calls <see cref="P:MonoTouch.CoreSpotlight.CompletionHandler" />, if present, with <see cref="F:MonoTouch.CoreSpotlight.CSSearchQueryErrorCode.Cancelled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public virtual bool Cancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isCancelled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether the query has been canceled.</summary>
        <value>A value that tells whether the query has been canceled.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletionHandler">
      <MemberSignature Language="C#" Value="public virtual Action&lt;MonoTouch.Foundation.NSError&gt; CompletionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; CompletionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("completionHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;MonoTouch.Foundation.NSError&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a handler that, if it is not <see langword="null" />, is run when the search completes.</summary>
        <value>
          <para>A  handler that, if supplied, is run when the search completes.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FoundItemCount">
      <MemberSignature Language="C#" Value="public virtual uint FoundItemCount { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 FoundItemCount" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nuint FoundItemCount { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint FoundItemCount" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("foundItemCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.UInt32</ReturnType>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current number of found items.</summary>
        <value>The current number of found items.</value>
        <remarks>This number will grow as more search results become ready.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FoundItemsHandler">
      <MemberSignature Language="C#" Value="public virtual Action&lt;MonoTouch.CoreSpotlight.CSSearchableItem[]&gt; FoundItemsHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class MonoTouch.CoreSpotlight.CSSearchableItem[]&gt; FoundItemsHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("foundItemsHandler")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setFoundItemsHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;MonoTouch.CoreSpotlight.CSSearchableItem[]&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a handler that, if it is not <see langword="null" />, is run when a batch of search results is ready.</summary>
        <value>
          <para>A a handler that, if it is not <see langword="null" />, is run when a batch of search results is ready.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionClasses">
      <MemberSignature Language="C#" Value="public virtual string[] ProtectionClasses { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ProtectionClasses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("protectionClasses")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setProtectionClasses:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array of protection classes for the indexed data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("start")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the search.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
