<Namespace Name="MonoTouch.UIKit">
  <Docs>
    <summary>User Interface APIs for MonoTouch.</summary>
    <remarks>
      <para>
	MonoTouch.UIKit is a binding to CocoaTouch's widget set.  Use
	the classes in this space to create native user interfaces with
	iOS UIKit.
      </para>
      
      <para>

	iOS Applications start as instances of the UIApplication
	class, they can either be an instance of UIApplication or a
	subclass of <see cref="T:MonoTouch.UIKit.UIApplication"/>.
	This UIApplication object will invoke a number of methods in
	response to starting up, shutting down, going to the
	background and other interesting events by calling methods on
	an instace of the <see
	cref="T:MonoTouch.UIKit.UIApplicationDelegate"/> class.  Most
	applications will override the <see
	cref="M:MonoTouch.UIKit.UIApplicationDelegate.FinishedLaunching"
	/> which is responsible for creating the main <see
	cref="T:MonoTouch.UIKit.UIWindow"/> and configuring the
	topmost <see cref="T:MonoTouch.UIKit.UIViewController"/> to
	display.

      </para>

      <para>

	Most applications will create a single <see
	cref="T:MonoTouch.UIKit.UIWindow"/>, windows work in concert
	with <see cref="T:MonoTouch.UIKit.UIViewController"/> objects
	which are in charge of orchestrating multiple views, handle
	rotation and handle various events for you.  This is why on
	startup, you must create both a window and sets its root view
	controller, like this:

      </para>

<example>
<code lang="c#">
[Register ("AppDelegate")]
public partial class AppDelegate : UIApplicationDelegate
{
	UIWindow window;

	public override bool FinishedLaunching (UIApplication app, NSDictionary options)
	{
		window = new UIWindow (UIScreen.MainScreen.Bounds);
		window.RootViewController = new UIViewController ();
		window.MakeKeyAndVisible ();
		
		return true;
	}
}
</code>
</example>

      <para>

	Response to user input is implement in UIKit by sublcasses of
	<see cref="T:MonoTouch.UIKit.UIResponder"/>: UIApplication,
	UIViewControllers and their subclasses and UIView and their
	subclasses all inherit from this class.
      </para>

      <format type="text/html">
        <h2>TextKit</h2>
      </format>
      
      <para>

	Starting with iOS 7, the text rendering engine exposed on
	UIKit was upgraded to expose a wide range of typographical
	capabilities.  This functionality was previously only
	available when using the low-level <see
	cref="N:MonoTouch.CoreText"/> APIs.      On iOS6, the "AttributedText" property was surfaced and you were limited to what you could do by what was supported by attributed text, with iOS7, developers have access to the "TextStorage" property which provides full control of how things are rendered.
      </para>

      <para> TextKit supports: paginated text, text in columns, text
	wrapping, rich text editing, interactive text coloring, text
	folding, custom truncation, and dynamic type.  </para>

      <para>

	The TextKit family of APIs provide a modern and sophisticated
	text layout and rendering engine integrated right into UIKit.
	This means that you can control the finer details of text
	rendering on UIKit elements as well as integrating this with
	animations.  Because of this the controls in UIKit support all
	text attributes and features like kernings and ligatures as
	well as text effects like Letterpress.

      </para>

      <para>
	
	Starting with iOS7 controls like <see
	cref="T:MonoTouch.UIKit.UILabel"/>, <see
	cref="T:MonoTouch.UIKit.UITextField"/> and <see
	cref="T:MonoTouch.UIKit.UITextView"/> are implemented using
	TextKit directly, the same engine that powers WebKit (the <see
	cref="T:MonoTouch.UIKit.UIWebView"/> control).

      </para>
      
      <format type="text/html">
        <h3>Dynamic Type</h3>
      </format>
<!--
      <para>
	Designed type styles, optimized for legibility, user picks size, accessibility, 
      </para>

      <format type="text/html">
        <h3>Font descriptors</h3>
      </format>

      <para>
	Specifies a font, queries fonts, can be archived.
      </para>

      <format type="text/html">
        <h3>Symbolic Traits</h3>
      </format>
      <format type="text/html">
        <h3>Exclusion Paths</h3>
      </format>
      <format type="text/html">
        <h3>UITextView Composition</h3>
      </format>
      <format type="text/html">
        <h3>NSTextContainer</h3>
      </format>
      <para>
	Coordinates for NSLayoutManager, Exclusion paths live in NSTextContainer coordinates.
      </para>

      <format type="text/html">
        <h3>UITextView Composition</h3>
      </format>
      <format type="text/html">
        <h3>Data Detectors</h3>
      </format>
      <format type="text/html">
        <h3>Text Attachments</h3>
      </format>
      <para>
	Used for things like inline images.
      </para>

      <format type="text/html">
        <h3>Size Changes</h3>
      </format>
      <para>
	Observe change.   For Auto-layout, invalidate intrinsic content size.   Use NeedsLayout if you laid objects manually to call the re-layout method.  Invalidate font descriptors.
      </para>
      -->

    </remarks>
  </Docs>
</Namespace>
